@startuml
namespace api {
    class AwardDetail << (S,Aquamarine) >> {
        + PlayerId *int32
        + Nums *int64
        + Period *int32
        + Photo *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + PlayerId *int32
        + Nums *int64
        + Period *int32
        + Photo *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetPlayerId() int32
        + GetNums() int64
        + GetPeriod() int32
        + GetPhoto() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetPlayerId() int32
        + GetNums() int64
        + GetPeriod() int32
        + GetPhoto() string

    }
    class AwardPoolRecord << (S,Aquamarine) >> {
        + Time *string
        + Name *string
        + PoolId *int32
        + Award *int32
        + PlayerId *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Time *string
        + Name *string
        + PoolId *int32
        + Award *int32
        + PlayerId *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetTime() string
        + GetName() string
        + GetPoolId() int32
        + GetAward() int32
        + GetPlayerId() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetTime() string
        + GetName() string
        + GetPoolId() int32
        + GetAward() int32
        + GetPlayerId() int64

    }
    class AwardProp << (S,Aquamarine) >> {
        + PropId *int32
        + Num *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + PropId *int32
        + Num *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetPropId() int32
        + GetNum() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetPropId() int32
        + GetNum() int32

    }
    interface BydldBMServer  {
        + Req_LoginGameWithToken(ctx context.Context, req *CSLoginGameWithToken) (*SCLoginGameWithToken, error)
        + Req_SetProbability(ctx context.Context, req *CSSetProbability) (*CommonResp, error)
        + Req_FishOutsideScreen(ctx context.Context, req *CSFishOutsideScreen) (*CommonResp, error)
        + Req_LockFish(ctx context.Context, req *CSLockFish) (*CommonResp, error)
        + Req_UserShootMulti(ctx context.Context, req *CSUserShootMulti) (*CommonResp, error)
        + Req_HitMultiFish(ctx context.Context, req *CSHitMultiFish) (*CommonResp, error)
        + Req_SetSkill(ctx context.Context, req *CSSetSkill) (*CommonResp, error)
        + Req_SyncMoney(ctx context.Context, req *CSSyncMoney) (*CommonResp, error)
        + Req_UserReady(ctx context.Context, req *CSUserReady) (*CommonResp, error)
        + Req_SyncFishReq(ctx context.Context, req *CSSyncFishReq) (*CommonResp, error)
        + Req_SyncFishRsp(ctx context.Context, req *CSSyncFishRsp) (*CommonResp, error)
        + Req_UserRunBackground(ctx context.Context, req *CSUserRunBackground) (*CommonResp, error)
        + Req_TridentInfo(ctx context.Context, req *CSTridentInfo) (*SCTridentInfo, error)
        + Req_TridentBet(ctx context.Context, req *CSTridentBet) (*CommonResp, error)
        + Req_ShootTorpedo(ctx context.Context, req *CSShootTorpedo) (*CommonResp, error)
        + Req_SuperTridentShoot(ctx context.Context, req *CSSuperTridentShoot) (*CommonResp, error)
        + Req_SuperTridentAttack(ctx context.Context, req *CSSuperTridentAttack) (*CommonResp, error)
        + Req_FreeTimeEnd(ctx context.Context, req *CSFreeTimeEnd) (*CommonResp, error)
        + Req_BigSmallChoose(ctx context.Context, req *CSBigSmallChoose) (*CommonResp, error)
        + Req_BigSmallBet(ctx context.Context, req *CSBigSmallBet) (*CommonResp, error)
        + Req_UserScoreRecord(ctx context.Context, req *UserScoreRecord) (*CommonResp, error)
        + Req_ScratchNewYearCard(ctx context.Context, req *CSScratchNewYearCard) (*CommonResp, error)
        + Req_BuyNewYearCard(ctx context.Context, req *CSBuyNewYearCard) (*CommonResp, error)
        + Req_NewYearCardExchange(ctx context.Context, req *CSNewYearCardExchange) (*CommonResp, error)
        + Req_NewYearCardAwardRecord(ctx context.Context, req *CSNewYearCardAwardRecord) (*CommonResp, error)
        + Req_ClickStatistic(ctx context.Context, req *CSClickStatistic) (*CommonResp, error)
        + Req_TaskInfo(ctx context.Context, req *CSTaskInfo) (*CommonResp, error)
        + Req_ComTask(ctx context.Context, req *CSComTask) (*CommonResp, error)
        + Req_SaveSkillTime(ctx context.Context, req *CSSaveSkillTime) (*CommonResp, error)
        + Req_AwardPoolRecord(ctx context.Context, req *CSAwardPoolRecord) (*SCAwardPoolRecord, error)
        + Req_MatchPackAddition(ctx context.Context, req *CSMatchPackAddition) (*CommonResp, error)
        + Req_FortuneShoot(ctx context.Context, req *CSFortuneShoot) (*CommonResp, error)
        + Req_UserPoolInfo(ctx context.Context, req *CSUserPoolInfo) (*SCUserPoolInfo, error)
        + Req_UserPoolStatus(ctx context.Context, req *CSUserPoolStatus) (*SCUserPoolStatus, error)
        + Req_UserPoolPreDraw(ctx context.Context, req *CSUserPoolPreDraw) (*SCUserPoolPreDraw, error)
        + Req_UserPoolDraw(ctx context.Context, req *CSUserPoolDraw) (*SCUserPoolDraw, error)
        + Req_GetLuckyNum(ctx context.Context, req *CSGetLuckyNum) (*CommonResp, error)
        + Req_LuckyDrawInfo(ctx context.Context, req *CSLuckyDrawInfo) (*CommonResp, error)
        + Req_GetLuckyTaskAward(ctx context.Context, req *CSGetLuckyTaskAward) (*CommonResp, error)
        + Req_LuckyRedDot(ctx context.Context, req *CSLuckyRedDot) (*CommonResp, error)
        + Req_LuckyRecord(ctx context.Context, req *CSLuckyRecord) (*CommonResp, error)
        + Req_DragonWheel(ctx context.Context, req *CSDragonWheelStart) (*CommonResp, error)
        + Req_FragmentTaskData(ctx context.Context, req *CSFragmentTaskData) (*SCFragmentTaskData, error)
        + Req_FragmentTaskReward(ctx context.Context, req *CSFragmentTaskReward) (*SCFragmentTaskReward, error)

    }
    interface BydldClient  {
        + Req_LoginGameWithToken(ctx "context.Context, in *CSLoginGameWithToken, opts ...grpc.CallOption) (*SCLoginGameWithToken, error)
        + Req_SetProbability(ctx "context.Context, in *CSSetProbability, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_FishOutsideScreen(ctx "context.Context, in *CSFishOutsideScreen, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_LockFish(ctx "context.Context, in *CSLockFish, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_UserShootMulti(ctx "context.Context, in *CSUserShootMulti, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_HitMultiFish(ctx "context.Context, in *CSHitMultiFish, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SetSkill(ctx "context.Context, in *CSSetSkill, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SyncMoney(ctx "context.Context, in *CSSyncMoney, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_UserReady(ctx "context.Context, in *CSUserReady, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SyncFishReq(ctx "context.Context, in *CSSyncFishReq, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SyncFishRsp(ctx "context.Context, in *CSSyncFishRsp, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_UserRunBackground(ctx "context.Context, in *CSUserRunBackground, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_TridentInfo(ctx "context.Context, in *CSTridentInfo, opts ...grpc.CallOption) (*SCTridentInfo, error)
        + Req_TridentBet(ctx "context.Context, in *CSTridentBet, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_ShootTorpedo(ctx "context.Context, in *CSShootTorpedo, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SuperTridentShoot(ctx "context.Context, in *CSSuperTridentShoot, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SuperTridentAttack(ctx "context.Context, in *CSSuperTridentAttack, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_FreeTimeEnd(ctx "context.Context, in *CSFreeTimeEnd, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_BigSmallChoose(ctx "context.Context, in *CSBigSmallChoose, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_BigSmallBet(ctx "context.Context, in *CSBigSmallBet, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_UserScoreRecord(ctx "context.Context, in *UserScoreRecord, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_ScratchNewYearCard(ctx "context.Context, in *CSScratchNewYearCard, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_BuyNewYearCard(ctx "context.Context, in *CSBuyNewYearCard, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_NewYearCardExchange(ctx "context.Context, in *CSNewYearCardExchange, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_NewYearCardAwardRecord(ctx "context.Context, in *CSNewYearCardAwardRecord, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_ClickStatistic(ctx "context.Context, in *CSClickStatistic, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_TaskInfo(ctx "context.Context, in *CSTaskInfo, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_ComTask(ctx "context.Context, in *CSComTask, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SaveSkillTime(ctx "context.Context, in *CSSaveSkillTime, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_AwardPoolRecord(ctx "context.Context, in *CSAwardPoolRecord, opts ...grpc.CallOption) (*SCAwardPoolRecord, error)
        + Req_MatchPackAddition(ctx "context.Context, in *CSMatchPackAddition, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_FortuneShoot(ctx "context.Context, in *CSFortuneShoot, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_UserPoolInfo(ctx "context.Context, in *CSUserPoolInfo, opts ...grpc.CallOption) (*SCUserPoolInfo, error)
        + Req_UserPoolStatus(ctx "context.Context, in *CSUserPoolStatus, opts ...grpc.CallOption) (*SCUserPoolStatus, error)
        + Req_UserPoolPreDraw(ctx "context.Context, in *CSUserPoolPreDraw, opts ...grpc.CallOption) (*SCUserPoolPreDraw, error)
        + Req_UserPoolDraw(ctx "context.Context, in *CSUserPoolDraw, opts ...grpc.CallOption) (*SCUserPoolDraw, error)
        + Req_GetLuckyNum(ctx "context.Context, in *CSGetLuckyNum, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_LuckyDrawInfo(ctx "context.Context, in *CSLuckyDrawInfo, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_GetLuckyTaskAward(ctx "context.Context, in *CSGetLuckyTaskAward, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_LuckyRedDot(ctx "context.Context, in *CSLuckyRedDot, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_LuckyRecord(ctx "context.Context, in *CSLuckyRecord, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_DragonWheel(ctx "context.Context, in *CSDragonWheelStart, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_FragmentTaskData(ctx "context.Context, in *CSFragmentTaskData, opts ...grpc.CallOption) (*SCFragmentTaskData, error)
        + Req_FragmentTaskReward(ctx "context.Context, in *CSFragmentTaskReward, opts ...grpc.CallOption) (*SCFragmentTaskReward, error)

    }
    interface BydldCometServer  {
        + SetCometChan(cl *comet.ChanList, cs *comet.Server) 
        + Req_LoginGameWithToken(ctx context.Context, req *CSLoginGameWithToken) (*SCLoginGameWithToken, error)
        + Req_SetProbability(ctx context.Context, req *CSSetProbability) (*CommonResp, error)
        + Req_FishOutsideScreen(ctx context.Context, req *CSFishOutsideScreen) (*CommonResp, error)
        + Req_LockFish(ctx context.Context, req *CSLockFish) (*CommonResp, error)
        + Req_UserShootMulti(ctx context.Context, req *CSUserShootMulti) (*CommonResp, error)
        + Req_HitMultiFish(ctx context.Context, req *CSHitMultiFish) (*CommonResp, error)
        + Req_SetSkill(ctx context.Context, req *CSSetSkill) (*CommonResp, error)
        + Req_SyncMoney(ctx context.Context, req *CSSyncMoney) (*CommonResp, error)
        + Req_UserReady(ctx context.Context, req *CSUserReady) (*CommonResp, error)
        + Req_SyncFishReq(ctx context.Context, req *CSSyncFishReq) (*CommonResp, error)
        + Req_SyncFishRsp(ctx context.Context, req *CSSyncFishRsp) (*CommonResp, error)
        + Req_UserRunBackground(ctx context.Context, req *CSUserRunBackground) (*CommonResp, error)
        + Req_TridentInfo(ctx context.Context, req *CSTridentInfo) (*SCTridentInfo, error)
        + Req_TridentBet(ctx context.Context, req *CSTridentBet) (*CommonResp, error)
        + Req_ShootTorpedo(ctx context.Context, req *CSShootTorpedo) (*CommonResp, error)
        + Req_SuperTridentShoot(ctx context.Context, req *CSSuperTridentShoot) (*CommonResp, error)
        + Req_SuperTridentAttack(ctx context.Context, req *CSSuperTridentAttack) (*CommonResp, error)
        + Req_FreeTimeEnd(ctx context.Context, req *CSFreeTimeEnd) (*CommonResp, error)
        + Req_BigSmallChoose(ctx context.Context, req *CSBigSmallChoose) (*CommonResp, error)
        + Req_BigSmallBet(ctx context.Context, req *CSBigSmallBet) (*CommonResp, error)
        + Req_UserScoreRecord(ctx context.Context, req *UserScoreRecord) (*CommonResp, error)
        + Req_ScratchNewYearCard(ctx context.Context, req *CSScratchNewYearCard) (*CommonResp, error)
        + Req_BuyNewYearCard(ctx context.Context, req *CSBuyNewYearCard) (*CommonResp, error)
        + Req_NewYearCardExchange(ctx context.Context, req *CSNewYearCardExchange) (*CommonResp, error)
        + Req_NewYearCardAwardRecord(ctx context.Context, req *CSNewYearCardAwardRecord) (*CommonResp, error)
        + Req_ClickStatistic(ctx context.Context, req *CSClickStatistic) (*CommonResp, error)
        + Req_TaskInfo(ctx context.Context, req *CSTaskInfo) (*CommonResp, error)
        + Req_ComTask(ctx context.Context, req *CSComTask) (*CommonResp, error)
        + Req_SaveSkillTime(ctx context.Context, req *CSSaveSkillTime) (*CommonResp, error)
        + Req_AwardPoolRecord(ctx context.Context, req *CSAwardPoolRecord) (*SCAwardPoolRecord, error)
        + Req_MatchPackAddition(ctx context.Context, req *CSMatchPackAddition) (*CommonResp, error)
        + Req_FortuneShoot(ctx context.Context, req *CSFortuneShoot) (*CommonResp, error)
        + Req_UserPoolInfo(ctx context.Context, req *CSUserPoolInfo) (*SCUserPoolInfo, error)
        + Req_UserPoolStatus(ctx context.Context, req *CSUserPoolStatus) (*SCUserPoolStatus, error)
        + Req_UserPoolPreDraw(ctx context.Context, req *CSUserPoolPreDraw) (*SCUserPoolPreDraw, error)
        + Req_UserPoolDraw(ctx context.Context, req *CSUserPoolDraw) (*SCUserPoolDraw, error)
        + Req_GetLuckyNum(ctx context.Context, req *CSGetLuckyNum) (*CommonResp, error)
        + Req_LuckyDrawInfo(ctx context.Context, req *CSLuckyDrawInfo) (*CommonResp, error)
        + Req_GetLuckyTaskAward(ctx context.Context, req *CSGetLuckyTaskAward) (*CommonResp, error)
        + Req_LuckyRedDot(ctx context.Context, req *CSLuckyRedDot) (*CommonResp, error)
        + Req_LuckyRecord(ctx context.Context, req *CSLuckyRecord) (*CommonResp, error)
        + Req_DragonWheel(ctx context.Context, req *CSDragonWheelStart) (*CommonResp, error)
        + Req_FragmentTaskData(ctx context.Context, req *CSFragmentTaskData) (*SCFragmentTaskData, error)
        + Req_FragmentTaskReward(ctx context.Context, req *CSFragmentTaskReward) (*SCFragmentTaskReward, error)

    }
    interface BydldServer  {
        + Req_LoginGameWithToken( "context.Context,  *CSLoginGameWithToken) (*SCLoginGameWithToken, error)
        + Req_SetProbability( "context.Context,  *CSSetProbability) (*CommonResp, error)
        + Req_FishOutsideScreen( "context.Context,  *CSFishOutsideScreen) (*CommonResp, error)
        + Req_LockFish( "context.Context,  *CSLockFish) (*CommonResp, error)
        + Req_UserShootMulti( "context.Context,  *CSUserShootMulti) (*CommonResp, error)
        + Req_HitMultiFish( "context.Context,  *CSHitMultiFish) (*CommonResp, error)
        + Req_SetSkill( "context.Context,  *CSSetSkill) (*CommonResp, error)
        + Req_SyncMoney( "context.Context,  *CSSyncMoney) (*CommonResp, error)
        + Req_UserReady( "context.Context,  *CSUserReady) (*CommonResp, error)
        + Req_SyncFishReq( "context.Context,  *CSSyncFishReq) (*CommonResp, error)
        + Req_SyncFishRsp( "context.Context,  *CSSyncFishRsp) (*CommonResp, error)
        + Req_UserRunBackground( "context.Context,  *CSUserRunBackground) (*CommonResp, error)
        + Req_TridentInfo( "context.Context,  *CSTridentInfo) (*SCTridentInfo, error)
        + Req_TridentBet( "context.Context,  *CSTridentBet) (*CommonResp, error)
        + Req_ShootTorpedo( "context.Context,  *CSShootTorpedo) (*CommonResp, error)
        + Req_SuperTridentShoot( "context.Context,  *CSSuperTridentShoot) (*CommonResp, error)
        + Req_SuperTridentAttack( "context.Context,  *CSSuperTridentAttack) (*CommonResp, error)
        + Req_FreeTimeEnd( "context.Context,  *CSFreeTimeEnd) (*CommonResp, error)
        + Req_BigSmallChoose( "context.Context,  *CSBigSmallChoose) (*CommonResp, error)
        + Req_BigSmallBet( "context.Context,  *CSBigSmallBet) (*CommonResp, error)
        + Req_UserScoreRecord( "context.Context,  *UserScoreRecord) (*CommonResp, error)
        + Req_ScratchNewYearCard( "context.Context,  *CSScratchNewYearCard) (*CommonResp, error)
        + Req_BuyNewYearCard( "context.Context,  *CSBuyNewYearCard) (*CommonResp, error)
        + Req_NewYearCardExchange( "context.Context,  *CSNewYearCardExchange) (*CommonResp, error)
        + Req_NewYearCardAwardRecord( "context.Context,  *CSNewYearCardAwardRecord) (*CommonResp, error)
        + Req_ClickStatistic( "context.Context,  *CSClickStatistic) (*CommonResp, error)
        + Req_TaskInfo( "context.Context,  *CSTaskInfo) (*CommonResp, error)
        + Req_ComTask( "context.Context,  *CSComTask) (*CommonResp, error)
        + Req_SaveSkillTime( "context.Context,  *CSSaveSkillTime) (*CommonResp, error)
        + Req_AwardPoolRecord( "context.Context,  *CSAwardPoolRecord) (*SCAwardPoolRecord, error)
        + Req_MatchPackAddition( "context.Context,  *CSMatchPackAddition) (*CommonResp, error)
        + Req_FortuneShoot( "context.Context,  *CSFortuneShoot) (*CommonResp, error)
        + Req_UserPoolInfo( "context.Context,  *CSUserPoolInfo) (*SCUserPoolInfo, error)
        + Req_UserPoolStatus( "context.Context,  *CSUserPoolStatus) (*SCUserPoolStatus, error)
        + Req_UserPoolPreDraw( "context.Context,  *CSUserPoolPreDraw) (*SCUserPoolPreDraw, error)
        + Req_UserPoolDraw( "context.Context,  *CSUserPoolDraw) (*SCUserPoolDraw, error)
        + Req_GetLuckyNum( "context.Context,  *CSGetLuckyNum) (*CommonResp, error)
        + Req_LuckyDrawInfo( "context.Context,  *CSLuckyDrawInfo) (*CommonResp, error)
        + Req_GetLuckyTaskAward( "context.Context,  *CSGetLuckyTaskAward) (*CommonResp, error)
        + Req_LuckyRedDot( "context.Context,  *CSLuckyRedDot) (*CommonResp, error)
        + Req_LuckyRecord( "context.Context,  *CSLuckyRecord) (*CommonResp, error)
        + Req_DragonWheel( "context.Context,  *CSDragonWheelStart) (*CommonResp, error)
        + Req_FragmentTaskData( "context.Context,  *CSFragmentTaskData) (*SCFragmentTaskData, error)
        + Req_FragmentTaskReward( "context.Context,  *CSFragmentTaskReward) (*SCFragmentTaskReward, error)

    }
    class CSAwardPoolRecord << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSBigSmallBet << (S,Aquamarine) >> {
        + IsBetBig *bool
        + Times *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + IsBetBig *bool
        + Times *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIsBetBig() bool
        + GetTimes() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIsBetBig() bool
        + GetTimes() int32

    }
    class CSBigSmallChoose << (S,Aquamarine) >> {
        + ChairIdx *int32
        + EnterOrExit *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + EnterOrExit *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetEnterOrExit() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetEnterOrExit() int32

    }
    class CSBuyNewYearCard << (S,Aquamarine) >> {
        + BuyCount *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + BuyCount *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetBuyCount() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetBuyCount() int32

    }
    class CSClickStatistic << (S,Aquamarine) >> {
        + Num *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Num *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetNum() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetNum() string

    }
    class CSComTask << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSDragonWheelStart << (S,Aquamarine) >> {
        + Stage *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Stage *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetStage() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetStage() int32

    }
    class CSFishOutsideScreen << (S,Aquamarine) >> {
        + FishUid *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + FishUid *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetFishUid() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetFishUid() int32

    }
    class CSFortuneShoot << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSFragmentTaskData << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSFragmentTaskReward << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSFreeTimeEnd << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSGetLuckyNum << (S,Aquamarine) >> {
        + Times *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Times *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetTimes() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetTimes() int32

    }
    class CSGetLuckyTaskAward << (S,Aquamarine) >> {
        + TaskId *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + TaskId *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetTaskId() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetTaskId() int32

    }
    class CSHBonusPool << (S,Aquamarine) >> {
        + MathcId *int32
        + TimeId *int32
        + PlayerId *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + MathcId *int32
        + TimeId *int32
        + PlayerId *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetMathcId() int32
        + GetTimeId() int32
        + GetPlayerId() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetMathcId() int32
        + GetTimeId() int32
        + GetPlayerId() int64

    }
    class CSHHistoryRank << (S,Aquamarine) >> {
        + PlayerId *int64
        + MatchId *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + PlayerId *int64
        + MatchId *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetPlayerId() int64
        + GetMatchId() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetPlayerId() int64
        + GetMatchId() int32

    }
    class CSHLuckyInfo << (S,Aquamarine) >> {
        + MatchId *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + MatchId *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetMatchId() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetMatchId() int32

    }
    class CSHMatchInfo << (S,Aquamarine) >> {
        + PlayerId *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + PlayerId *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetPlayerId() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetPlayerId() int64

    }
    class CSHMatchInfoTip << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSHRankBar << (S,Aquamarine) >> {
        + MathcId *int32
        + TimeId *int32
        + PlayerId *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + MathcId *int32
        + TimeId *int32
        + PlayerId *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetMathcId() int32
        + GetTimeId() int32
        + GetPlayerId() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetMathcId() int32
        + GetTimeId() int32
        + GetPlayerId() int64

    }
    class CSHRealRank << (S,Aquamarine) >> {
        + PlayerId *int64
        + MathcId *int32
        + TimeId *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + PlayerId *int64
        + MathcId *int32
        + TimeId *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetPlayerId() int64
        + GetMathcId() int32
        + GetTimeId() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetPlayerId() int64
        + GetMathcId() int32
        + GetTimeId() int32

    }
    class CSHReward << (S,Aquamarine) >> {
        + MathcId *int32
        + TimeId *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + MathcId *int32
        + TimeId *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetMathcId() int32
        + GetTimeId() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetMathcId() int32
        + GetTimeId() int32

    }
    class CSHeartBeat << (S,Aquamarine) >> {
        + ChairIdx *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32

    }
    class CSHitMultiFish << (S,Aquamarine) >> {
        + HitInfo []*HitFish
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + HitInfo []*HitFish
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetHitInfo() []*HitFish
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetHitInfo() []*HitFish

    }
    class CSLockFish << (S,Aquamarine) >> {
        + ChairIdx *int32
        + FishUid *int32
        + IsOpen *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + FishUid *int32
        + IsOpen *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetFishUid() int32
        + GetIsOpen() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetFishUid() int32
        + GetIsOpen() bool

    }
    class CSLoginGameWithToken << (S,Aquamarine) >> {
        + PlayerId *int64
        + Token *string
        + OSType *int32
        + TableId *int32
        + LastTableId *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + PlayerId *int64
        + Token *string
        + OSType *int32
        + TableId *int32
        + LastTableId *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetPlayerId() int64
        + GetToken() string
        + GetOSType() int32
        + GetTableId() int32
        + GetLastTableId() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetPlayerId() int64
        + GetToken() string
        + GetOSType() int32
        + GetTableId() int32
        + GetLastTableId() int32

    }
    class CSLuckyDrawInfo << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSLuckyRecord << (S,Aquamarine) >> {
        + Type *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Type *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetType() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetType() int32

    }
    class CSLuckyRedDot << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSMatchPackAddition << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSNewYearCardAwardRecord << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSNewYearCardExchange << (S,Aquamarine) >> {
        + Times *int32
        + ExchangeAll *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Times *int32
        + ExchangeAll *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetTimes() int32
        + GetExchangeAll() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetTimes() int32
        + GetExchangeAll() bool

    }
    class CSNotifyLogout << (S,Aquamarine) >> {
        + ChairIdx *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32

    }
    class CSSaveSkillTime << (S,Aquamarine) >> {
        + SkilTime []*SkillTime
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + SkilTime []*SkillTime
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetSkilTime() []*SkillTime
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetSkilTime() []*SkillTime

    }
    class CSScratchNewYearCard << (S,Aquamarine) >> {
        + ChairIdx *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32

    }
    class CSSetProbability << (S,Aquamarine) >> {
        + AddOrDel *int32
        + GunLevel *int32
        + IsUseAuto *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + AddOrDel *int32
        + GunLevel *int32
        + IsUseAuto *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetAddOrDel() int32
        + GetGunLevel() int32
        + GetIsUseAuto() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetAddOrDel() int32
        + GetGunLevel() int32
        + GetIsUseAuto() bool

    }
    class CSSetSkill << (S,Aquamarine) >> {
        + ChairIdx *int32
        + DoubleFlag *int32
        + ThroughFlag *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + DoubleFlag *int32
        + ThroughFlag *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetDoubleFlag() int32
        + GetThroughFlag() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetDoubleFlag() int32
        + GetThroughFlag() int32

    }
    class CSShootTorpedo << (S,Aquamarine) >> {
        + ChairIdx *int32
        + TorpedoId *string
        + ShootAll *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + TorpedoId *string
        + ShootAll *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetTorpedoId() string
        + GetShootAll() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetTorpedoId() string
        + GetShootAll() bool

    }
    class CSSuperTridentAttack << (S,Aquamarine) >> {
        + ScreenFishes []int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ScreenFishes []int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetScreenFishes() []int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetScreenFishes() []int32

    }
    class CSSuperTridentShoot << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSSyncFishReq << (S,Aquamarine) >> {
        + ChairIdx *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32

    }
    class CSSyncFishRsp << (S,Aquamarine) >> {
        + FishTraces []*SyncFishTraces
        + AccelerateFlag *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + FishTraces []*SyncFishTraces
        + AccelerateFlag *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetFishTraces() []*SyncFishTraces
        + GetAccelerateFlag() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetFishTraces() []*SyncFishTraces
        + GetAccelerateFlag() bool

    }
    class CSSyncMoney << (S,Aquamarine) >> {
        + ChairIdx *int32
        + Type *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + Type *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetType() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetType() int32

    }
    class CSTaskInfo << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSTridentBet << (S,Aquamarine) >> {
        + Bet *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Bet *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetBet() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetBet() int32

    }
    class CSTridentInfo << (S,Aquamarine) >> {
        + ChairIdx *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32

    }
    class CSUpdateHallProp << (S,Aquamarine) >> {
        + ChairIdx *int32
        + ConfigId *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + ConfigId *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetConfigId() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetConfigId() int32

    }
    class CSUserPoolDraw << (S,Aquamarine) >> {
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)

    }
    class CSUserPoolInfo << (S,Aquamarine) >> {
        + OpenPage *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + OpenPage *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetOpenPage() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetOpenPage() bool

    }
    class CSUserPoolPreDraw << (S,Aquamarine) >> {
        + Level *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Level *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetLevel() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetLevel() int32

    }
    class CSUserPoolStatus << (S,Aquamarine) >> {
        + Open *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Open *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetOpen() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetOpen() bool

    }
    class CSUserReady << (S,Aquamarine) >> {
        + PlayerId *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + PlayerId *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetPlayerId() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetPlayerId() int64

    }
    class CSUserRunBackground << (S,Aquamarine) >> {
        + ChairIdx *int32
        + Background *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + Background *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetBackground() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetBackground() bool

    }
    class CSUserShootMulti << (S,Aquamarine) >> {
        + ShootBullet []*UserShoot
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ShootBullet []*UserShoot
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetShootBullet() []*UserShoot
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetShootBullet() []*UserShoot

    }
    class Capturefish << (S,Aquamarine) >> {
        + FishUid *int32
        + GetScore *int32
        + FishId *int32
        + Torpedoes []*ObjectData
        + LuckyRatio *int32
        + TridentScore *int32
        + EffectFish []*EffectFish
        + AwardTime *int32
        + BulletType *int32
        + Multiple *int32
        + GetPeilv *int32
        + Death *int32
        + Stage *int32
        + SubStage *int32
        + AwardIndex *int32
        + CritMultiple *int32
        + IngotMulti *int32
        + Ratio *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + FishUid *int32
        + GetScore *int32
        + FishId *int32
        + Torpedoes []*ObjectData
        + LuckyRatio *int32
        + TridentScore *int32
        + EffectFish []*EffectFish
        + AwardTime *int32
        + BulletType *int32
        + Multiple *int32
        + GetPeilv *int32
        + Death *int32
        + Stage *int32
        + SubStage *int32
        + AwardIndex *int32
        + CritMultiple *int32
        + IngotMulti *int32
        + Ratio *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetFishUid() int32
        + GetGetScore() int32
        + GetFishId() int32
        + GetTorpedoes() []*ObjectData
        + GetLuckyRatio() int32
        + GetTridentScore() int32
        + GetEffectFish() []*EffectFish
        + GetAwardTime() int32
        + GetBulletType() int32
        + GetMultiple() int32
        + GetGetPeilv() int32
        + GetDeath() int32
        + GetStage() int32
        + GetSubStage() int32
        + GetAwardIndex() int32
        + GetCritMultiple() int32
        + GetIngotMulti() int32
        + GetRatio() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetFishUid() int32
        + GetGetScore() int32
        + GetFishId() int32
        + GetTorpedoes() []*ObjectData
        + GetLuckyRatio() int32
        + GetTridentScore() int32
        + GetEffectFish() []*EffectFish
        + GetAwardTime() int32
        + GetBulletType() int32
        + GetMultiple() int32
        + GetGetPeilv() int32
        + GetDeath() int32
        + GetStage() int32
        + GetSubStage() int32
        + GetAwardIndex() int32
        + GetCritMultiple() int32
        + GetIngotMulti() int32
        + GetRatio() int32

    }
    class CommonResp << (S,Aquamarine) >> {
        + Code *int32
        + Message *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Code *int32
        + Message *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetCode() int32
        + GetMessage() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetCode() int32
        + GetMessage() string

    }
    class EffectFish << (S,Aquamarine) >> {
        + FishUid *int32
        + Score *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + FishUid *int32
        + Score *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetFishUid() int32
        + GetScore() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetFishUid() int32
        + GetScore() int32

    }
    class ErrCode << (S,Aquamarine) >> {
        + Enum() *ErrCode
        + String() string
        + UnmarshalJSON(data []byte) error
        + EnumDescriptor() ([]byte, []int)
        + Enum() *ErrCode
        + String() string
        + UnmarshalJSON(data []byte) error
        + EnumDescriptor() ([]byte, []int)

    }
    class FishTrace << (S,Aquamarine) >> {
        + X *float32
        + Y *float32
        + Z *float32
        + WaitTime *float32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + X *float32
        + Y *float32
        + Z *float32
        + WaitTime *float32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetX() float32
        + GetY() float32
        + GetZ() float32
        + GetWaitTime() float32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetX() float32
        + GetY() float32
        + GetZ() float32
        + GetWaitTime() float32

    }
    class FishTraces << (S,Aquamarine) >> {
        + FishUid *int32
        + FishId *int32
        + LiveTime *int32
        + Speed *float32
        + FishTrace []*FishTrace
        + SmallFishList []*SmallFish
        + RouteType *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + FishUid *int32
        + FishId *int32
        + LiveTime *int32
        + Speed *float32
        + FishTrace []*FishTrace
        + SmallFishList []*SmallFish
        + RouteType *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetFishUid() int32
        + GetFishId() int32
        + GetLiveTime() int32
        + GetSpeed() float32
        + GetFishTrace() []*FishTrace
        + GetSmallFishList() []*SmallFish
        + GetRouteType() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetFishUid() int32
        + GetFishId() int32
        + GetLiveTime() int32
        + GetSpeed() float32
        + GetFishTrace() []*FishTrace
        + GetSmallFishList() []*SmallFish
        + GetRouteType() int32

    }
    class GameCommand << (S,Aquamarine) >> {
        + Enum() *GameCommand
        + String() string
        + UnmarshalJSON(data []byte) error
        + EnumDescriptor() ([]byte, []int)
        + Enum() *GameCommand
        + String() string
        + UnmarshalJSON(data []byte) error
        + EnumDescriptor() ([]byte, []int)

    }
    class GiftBag << (S,Aquamarine) >> {
        + IsOpen *bool
        + FishId []int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + IsOpen *bool
        + FishId []int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIsOpen() bool
        + GetFishId() []int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIsOpen() bool
        + GetFishId() []int32

    }
    class HBonusPool << (S,Aquamarine) >> {
        + MatchId *int32
        + Name *string
        + Value *int64
        + Count *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + MatchId *int32
        + Name *string
        + Value *int64
        + Count *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetMatchId() int32
        + GetName() string
        + GetValue() int64
        + GetCount() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetMatchId() int32
        + GetName() string
        + GetValue() int64
        + GetCount() int64

    }
    class HistoryRank << (S,Aquamarine) >> {
        + Idx *int64
        + Icon *string
        + Name *string
        + AdditionSource *int32
        + Addition *int32
        + MatchGoods []*Object3
        + PackGoods []*Object3
        + LuckyGoods []*Object3
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Idx *int64
        + Icon *string
        + Name *string
        + AdditionSource *int32
        + Addition *int32
        + MatchGoods []*Object3
        + PackGoods []*Object3
        + LuckyGoods []*Object3
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIdx() int64
        + GetIcon() string
        + GetName() string
        + GetAdditionSource() int32
        + GetAddition() int32
        + GetMatchGoods() []*Object3
        + GetPackGoods() []*Object3
        + GetLuckyGoods() []*Object3
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIdx() int64
        + GetIcon() string
        + GetName() string
        + GetAdditionSource() int32
        + GetAddition() int32
        + GetMatchGoods() []*Object3
        + GetPackGoods() []*Object3
        + GetLuckyGoods() []*Object3

    }
    class HitFish << (S,Aquamarine) >> {
        + FishUid *int32
        + BulletId *int32
        + ThroughIdx *int32
        + FishId *int32
        + EffectFishUid []int32
        + Round *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + FishUid *int32
        + BulletId *int32
        + ThroughIdx *int32
        + FishId *int32
        + EffectFishUid []int32
        + Round *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetFishUid() int32
        + GetBulletId() int32
        + GetThroughIdx() int32
        + GetFishId() int32
        + GetEffectFishUid() []int32
        + GetRound() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetFishUid() int32
        + GetBulletId() int32
        + GetThroughIdx() int32
        + GetFishId() int32
        + GetEffectFishUid() []int32
        + GetRound() int32

    }
    class HttpResult << (S,Aquamarine) >> {
        + En *int32
        + Data []byte
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + En *int32
        + Data []byte
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetEn() int32
        + GetData() []byte
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetEn() int32
        + GetData() []byte

    }
    class IngotInfo << (S,Aquamarine) >> {
        + IngotId *int32
        + Remain *int32
        + Total *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + IngotId *int32
        + Remain *int32
        + Total *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIngotId() int32
        + GetRemain() int32
        + GetTotal() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIngotId() int32
        + GetRemain() int32
        + GetTotal() int32

    }
    class JumpHighArena << (S,Aquamarine) >> {
        + IsOpen *bool
        + Vip *int32
        + Coin *int32
        + GameTime *int32
        + FishId []int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + IsOpen *bool
        + Vip *int32
        + Coin *int32
        + GameTime *int32
        + FishId []int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIsOpen() bool
        + GetVip() int32
        + GetCoin() int32
        + GetGameTime() int32
        + GetFishId() []int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIsOpen() bool
        + GetVip() int32
        + GetCoin() int32
        + GetGameTime() int32
        + GetFishId() []int32

    }
    class LuckyInfo << (S,Aquamarine) >> {
        + LRange *int32
        + RRange *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + LRange *int32
        + RRange *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetLRange() int32
        + GetRRange() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetLRange() int32
        + GetRRange() int32

    }
    class LuckyRecord << (S,Aquamarine) >> {
        + Vip *int32
        + Times *int32
        + LuckyNum *int32
        + Tick *int64
        + NickName *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Vip *int32
        + Times *int32
        + LuckyNum *int32
        + Tick *int64
        + NickName *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetVip() int32
        + GetTimes() int32
        + GetLuckyNum() int32
        + GetTick() int64
        + GetNickName() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetVip() int32
        + GetTimes() int32
        + GetLuckyNum() int32
        + GetTick() int64
        + GetNickName() string

    }
    class LuckyTaskInfo << (S,Aquamarine) >> {
        + Id *int32
        + Status *int32
        + Score *int32
        + Text *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Id *int32
        + Status *int32
        + Score *int32
        + Text *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetId() int32
        + GetStatus() int32
        + GetScore() int32
        + GetText() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetId() int32
        + GetStatus() int32
        + GetScore() int32
        + GetText() string

    }
    class MatchInfoTip << (S,Aquamarine) >> {
        + Name *string
        + MathcId *int32
        + Time *string
        + Goods []*Object3
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Name *string
        + MathcId *int32
        + Time *string
        + Goods []*Object3
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetName() string
        + GetMathcId() int32
        + GetTime() string
        + GetGoods() []*Object3
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetName() string
        + GetMathcId() int32
        + GetTime() string
        + GetGoods() []*Object3

    }
    class MatchPackAddition << (S,Aquamarine) >> {
        + Id *string
        + IsBuy *bool
        + ScoreAddition *float64
        + ReawardAddition *float64
        + Card *int64
        + Sec *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Id *string
        + IsBuy *bool
        + ScoreAddition *float64
        + ReawardAddition *float64
        + Card *int64
        + Sec *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetId() string
        + GetIsBuy() bool
        + GetScoreAddition() float64
        + GetReawardAddition() float64
        + GetCard() int64
        + GetSec() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetId() string
        + GetIsBuy() bool
        + GetScoreAddition() float64
        + GetReawardAddition() float64
        + GetCard() int64
        + GetSec() int64

    }
    class NewYearCardActivityInfo << (S,Aquamarine) >> {
        + CardEnable *bool
        + CardCount *int32
        + CardVip *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + CardEnable *bool
        + CardCount *int32
        + CardVip *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetCardEnable() bool
        + GetCardCount() int32
        + GetCardVip() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetCardEnable() bool
        + GetCardCount() int32
        + GetCardVip() int32

    }
    class NewYearCardAward << (S,Aquamarine) >> {
        + CardIdx *int32
        + Award *int32
        + BlessAward *int32
        + Base *int32
        + Multiples []*NewYearCardMultiple
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + CardIdx *int32
        + Award *int32
        + BlessAward *int32
        + Base *int32
        + Multiples []*NewYearCardMultiple
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetCardIdx() int32
        + GetAward() int32
        + GetBlessAward() int32
        + GetBase() int32
        + GetMultiples() []*NewYearCardMultiple
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetCardIdx() int32
        + GetAward() int32
        + GetBlessAward() int32
        + GetBase() int32
        + GetMultiples() []*NewYearCardMultiple

    }
    class NewYearCardAwardRecord << (S,Aquamarine) >> {
        + Time *string
        + NormalAward *int32
        + BlessAward *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Time *string
        + NormalAward *int32
        + BlessAward *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetTime() string
        + GetNormalAward() int32
        + GetBlessAward() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetTime() string
        + GetNormalAward() int32
        + GetBlessAward() int32

    }
    class NewYearCardMultiple << (S,Aquamarine) >> {
        + AwardNo *string
        + Multiple *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + AwardNo *string
        + Multiple *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetAwardNo() string
        + GetMultiple() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetAwardNo() string
        + GetMultiple() int32

    }
    class Object2 << (S,Aquamarine) >> {
        + Key *string
        + Value *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Key *string
        + Value *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetKey() string
        + GetValue() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetKey() string
        + GetValue() string

    }
    class Object3 << (S,Aquamarine) >> {
        + Key *int32
        + Value *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Key *int32
        + Value *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetKey() int32
        + GetValue() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetKey() int32
        + GetValue() int64

    }
    class Object4 << (S,Aquamarine) >> {
        + Key *int32
        + Value []int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Key *int32
        + Value []int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetKey() int32
        + GetValue() []int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetKey() int32
        + GetValue() []int32

    }
    class ObjectData << (S,Aquamarine) >> {
        + Key *string
        + Value *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Key *string
        + Value *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetKey() string
        + GetValue() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetKey() string
        + GetValue() int32

    }
    class OwnRecord << (S,Aquamarine) >> {
        + Reward []*AwardProp
        + Status *int32
        + Tick *int64
        + LuckyNum *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Reward []*AwardProp
        + Status *int32
        + Tick *int64
        + LuckyNum *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetReward() []*AwardProp
        + GetStatus() int32
        + GetTick() int64
        + GetLuckyNum() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetReward() []*AwardProp
        + GetStatus() int32
        + GetTick() int64
        + GetLuckyNum() int64

    }
    class Prop << (S,Aquamarine) >> {
        + Id *int32
        + Count *int32
        + Ratio *int32
        + X *float32
        + Y *float32
        + Angle *float32
        + Status *int32
        + Multiple *int32
        + CritMulti *int32
        + IngotId *int32
        + RemainTimes *int32
        + TotalTimes *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Id *int32
        + Count *int32
        + Ratio *int32
        + X *float32
        + Y *float32
        + Angle *float32
        + Status *int32
        + Multiple *int32
        + CritMulti *int32
        + IngotId *int32
        + RemainTimes *int32
        + TotalTimes *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetId() int32
        + GetCount() int32
        + GetRatio() int32
        + GetX() float32
        + GetY() float32
        + GetAngle() float32
        + GetStatus() int32
        + GetMultiple() int32
        + GetCritMulti() int32
        + GetIngotId() int32
        + GetRemainTimes() int32
        + GetTotalTimes() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetId() int32
        + GetCount() int32
        + GetRatio() int32
        + GetX() float32
        + GetY() float32
        + GetAngle() float32
        + GetStatus() int32
        + GetMultiple() int32
        + GetCritMulti() int32
        + GetIngotId() int32
        + GetRemainTimes() int32
        + GetTotalTimes() int32

    }
    class RealRank << (S,Aquamarine) >> {
        + Idx *int64
        + Icon *string
        + Name *string
        + Score *int64
        + Goods []*Object3
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Idx *int64
        + Icon *string
        + Name *string
        + Score *int64
        + Goods []*Object3
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIdx() int64
        + GetIcon() string
        + GetName() string
        + GetScore() int64
        + GetGoods() []*Object3
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIdx() int64
        + GetIcon() string
        + GetName() string
        + GetScore() int64
        + GetGoods() []*Object3

    }
    class ResultRank << (S,Aquamarine) >> {
        + Idx *int64
        + Icon *string
        + Name *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Idx *int64
        + Icon *string
        + Name *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIdx() int64
        + GetIcon() string
        + GetName() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIdx() int64
        + GetIcon() string
        + GetName() string

    }
    class Reward << (S,Aquamarine) >> {
        + Idxl *int64
        + Idxr *int64
        + Goods []*Object3
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Idxl *int64
        + Idxr *int64
        + Goods []*Object3
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIdxl() int64
        + GetIdxr() int64
        + GetGoods() []*Object3
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIdxl() int64
        + GetIdxr() int64
        + GetGoods() []*Object3

    }
    class SCActivityInfo << (S,Aquamarine) >> {
        + Jump *JumpHighArena
        + Config *GiftBag
        + Card *NewYearCardActivityInfo
        + AwardPoolRank *bool
        + UserPool *UserPoolActivityInfo
        + LuckyDraw *bool
        + DragonWheel []*Object4
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Jump *JumpHighArena
        + Config *GiftBag
        + Card *NewYearCardActivityInfo
        + AwardPoolRank *bool
        + UserPool *UserPoolActivityInfo
        + LuckyDraw *bool
        + DragonWheel []*Object4
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetJump() *JumpHighArena
        + GetConfig() *GiftBag
        + GetCard() *NewYearCardActivityInfo
        + GetAwardPoolRank() bool
        + GetUserPool() *UserPoolActivityInfo
        + GetLuckyDraw() bool
        + GetDragonWheel() []*Object4
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetJump() *JumpHighArena
        + GetConfig() *GiftBag
        + GetCard() *NewYearCardActivityInfo
        + GetAwardPoolRank() bool
        + GetUserPool() *UserPoolActivityInfo
        + GetLuckyDraw() bool
        + GetDragonWheel() []*Object4

    }
    class SCAwardPoolRecord << (S,Aquamarine) >> {
        + Records []*AwardPoolRecord
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Records []*AwardPoolRecord
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetRecords() []*AwardPoolRecord
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetRecords() []*AwardPoolRecord

    }
    class SCBigSmallBet << (S,Aquamarine) >> {
        + ChairIdx *int32
        + Dices []int32
        + IsBetBig *bool
        + Award *int32
        + Score *int64
        + IsEnd *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + Dices []int32
        + IsBetBig *bool
        + Award *int32
        + Score *int64
        + IsEnd *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetDices() []int32
        + GetIsBetBig() bool
        + GetAward() int32
        + GetScore() int64
        + GetIsEnd() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetDices() []int32
        + GetIsBetBig() bool
        + GetAward() int32
        + GetScore() int64
        + GetIsEnd() bool

    }
    class SCBigSmallChoose << (S,Aquamarine) >> {
        + ChairIdx *int32
        + EnterExit *int32
        + Award *int32
        + Score *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + EnterExit *int32
        + Award *int32
        + Score *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetEnterExit() int32
        + GetAward() int32
        + GetScore() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetEnterExit() int32
        + GetAward() int32
        + GetScore() int64

    }
    class SCChangeScene << (S,Aquamarine) >> {
        + SceneIndex *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + SceneIndex *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetSceneIndex() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetSceneIndex() int32

    }
    class SCComTask << (S,Aquamarine) >> {
        + GunRatio *int32
        + GunLevel *int32
        + Award *int32
        + Ticket *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + GunRatio *int32
        + GunLevel *int32
        + Award *int32
        + Ticket *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetGunRatio() int32
        + GetGunLevel() int32
        + GetAward() int32
        + GetTicket() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetGunRatio() int32
        + GetGunLevel() int32
        + GetAward() int32
        + GetTicket() int32

    }
    class SCDragonWheelStop << (S,Aquamarine) >> {
        + Stage *int32
        + Ratio *int32
        + Score *int64
        + AtomicRatio *int32
        + FortuneRatio *int32
        + PoseidonRatio *int32
        + Error *int32
        + ChairId *int32
        + FishValue *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Stage *int32
        + Ratio *int32
        + Score *int64
        + AtomicRatio *int32
        + FortuneRatio *int32
        + PoseidonRatio *int32
        + Error *int32
        + ChairId *int32
        + FishValue *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetStage() int32
        + GetRatio() int32
        + GetScore() int64
        + GetAtomicRatio() int32
        + GetFortuneRatio() int32
        + GetPoseidonRatio() int32
        + GetError() int32
        + GetChairId() int32
        + GetFishValue() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetStage() int32
        + GetRatio() int32
        + GetScore() int64
        + GetAtomicRatio() int32
        + GetFortuneRatio() int32
        + GetPoseidonRatio() int32
        + GetError() int32
        + GetChairId() int32
        + GetFishValue() int32

    }
    class SCFishTracesList << (S,Aquamarine) >> {
        + FishTraces []*FishTraces
        + AccelerateFlag *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + FishTraces []*FishTraces
        + AccelerateFlag *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetFishTraces() []*FishTraces
        + GetAccelerateFlag() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetFishTraces() []*FishTraces
        + GetAccelerateFlag() bool

    }
    class SCFortuneShoot << (S,Aquamarine) >> {
        + ChairIdx *int32
        + CanShoot *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + CanShoot *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetCanShoot() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetCanShoot() bool

    }
    class SCFragmentTaskData << (S,Aquamarine) >> {
        + Status *int32
        + Count *int32
        + Total *int32
        + Ratio *int32
        + Reward []*Object3
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Status *int32
        + Count *int32
        + Total *int32
        + Ratio *int32
        + Reward []*Object3
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetStatus() int32
        + GetCount() int32
        + GetTotal() int32
        + GetRatio() int32
        + GetReward() []*Object3
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetStatus() int32
        + GetCount() int32
        + GetTotal() int32
        + GetRatio() int32
        + GetReward() []*Object3

    }
    class SCFragmentTaskReward << (S,Aquamarine) >> {
        + Reward []*Object3
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Reward []*Object3
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetReward() []*Object3
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetReward() []*Object3

    }
    class SCGetLuckyNum << (S,Aquamarine) >> {
        + Score *int32
        + ErrorCode *int32
        + LuckyNums []int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Score *int32
        + ErrorCode *int32
        + LuckyNums []int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetScore() int32
        + GetErrorCode() int32
        + GetLuckyNums() []int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetScore() int32
        + GetErrorCode() int32
        + GetLuckyNums() []int64

    }
    class SCHBonusPool << (S,Aquamarine) >> {
        + Pool []*HBonusPool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Pool []*HBonusPool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetPool() []*HBonusPool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetPool() []*HBonusPool

    }
    class SCHHistoryRank << (S,Aquamarine) >> {
        + MatchId *int32
        + RankList []*HistoryRank
        + OneselfRank *HistoryRank
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + MatchId *int32
        + RankList []*HistoryRank
        + OneselfRank *HistoryRank
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetMatchId() int32
        + GetRankList() []*HistoryRank
        + GetOneselfRank() *HistoryRank
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetMatchId() int32
        + GetRankList() []*HistoryRank
        + GetOneselfRank() *HistoryRank

    }
    class SCHLuckyInfo << (S,Aquamarine) >> {
        + MatchId *int32
        + Data []*LuckyInfo
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + MatchId *int32
        + Data []*LuckyInfo
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetMatchId() int32
        + GetData() []*LuckyInfo
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetMatchId() int32
        + GetData() []*LuckyInfo

    }
    class SCHMatchInfo << (S,Aquamarine) >> {
        + Name *string
        + MathcId *int32
        + TimeId *int32
        + Status *int64
        + Down *int64
        + Time *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Name *string
        + MathcId *int32
        + TimeId *int32
        + Status *int64
        + Down *int64
        + Time *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetName() string
        + GetMathcId() int32
        + GetTimeId() int32
        + GetStatus() int64
        + GetDown() int64
        + GetTime() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetName() string
        + GetMathcId() int32
        + GetTimeId() int32
        + GetStatus() int64
        + GetDown() int64
        + GetTime() string

    }
    class SCHMatchInfoTip << (S,Aquamarine) >> {
        + MatchTips []*MatchInfoTip
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + MatchTips []*MatchInfoTip
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetMatchTips() []*MatchInfoTip
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetMatchTips() []*MatchInfoTip

    }
    class SCHRankBar << (S,Aquamarine) >> {
        + Idx *int64
        + Total *int64
        + Reaward *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Idx *int64
        + Total *int64
        + Reaward *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIdx() int64
        + GetTotal() int64
        + GetReaward() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIdx() int64
        + GetTotal() int64
        + GetReaward() int64

    }
    class SCHRealRank << (S,Aquamarine) >> {
        + RealRank []*RealRank
        + OnselfRank *RealRank
        + TotalNum *int64
        + ScoreAddition *int32
        + RewardAddition *int32
        + CardAddition *int64
        + VipAddition *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + RealRank []*RealRank
        + OnselfRank *RealRank
        + TotalNum *int64
        + ScoreAddition *int32
        + RewardAddition *int32
        + CardAddition *int64
        + VipAddition *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetRealRank() []*RealRank
        + GetOnselfRank() *RealRank
        + GetTotalNum() int64
        + GetScoreAddition() int32
        + GetRewardAddition() int32
        + GetCardAddition() int64
        + GetVipAddition() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetRealRank() []*RealRank
        + GetOnselfRank() *RealRank
        + GetTotalNum() int64
        + GetScoreAddition() int32
        + GetRewardAddition() int32
        + GetCardAddition() int64
        + GetVipAddition() int32

    }
    class SCHReward << (S,Aquamarine) >> {
        + Rewards []*Reward
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Rewards []*Reward
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetRewards() []*Reward
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetRewards() []*Reward

    }
    class SCHeartBeat << (S,Aquamarine) >> {
        + ChairIdx *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32

    }
    class SCHitMultiFish << (S,Aquamarine) >> {
        + ChairIdx *int32
        + Invalid *int32
        + CaptureInfo []*Capturefish
        + Score *int64
        + Earn *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + Invalid *int32
        + CaptureInfo []*Capturefish
        + Score *int64
        + Earn *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetInvalid() int32
        + GetCaptureInfo() []*Capturefish
        + GetScore() int64
        + GetEarn() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetInvalid() int32
        + GetCaptureInfo() []*Capturefish
        + GetScore() int64
        + GetEarn() int32

    }
    class SCLockFish << (S,Aquamarine) >> {
        + ChairIdx *int32
        + FishUid *int32
        + IsOpen *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + FishUid *int32
        + IsOpen *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetFishUid() int32
        + GetIsOpen() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetFishUid() int32
        + GetIsOpen() bool

    }
    class SCLoginGameWithToken << (S,Aquamarine) >> {
        + SceneIndex *int32
        + TableId *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + SceneIndex *int32
        + TableId *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetSceneIndex() int32
        + GetTableId() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetSceneIndex() int32
        + GetTableId() int32

    }
    class SCLuckyAwardNotify << (S,Aquamarine) >> {
        + AwardType *int32
        + Detail []*AwardDetail
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + AwardType *int32
        + Detail []*AwardDetail
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetAwardType() int32
        + GetDetail() []*AwardDetail
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetAwardType() int32
        + GetDetail() []*AwardDetail

    }
    class SCLuckyDrawInfo << (S,Aquamarine) >> {
        + HourRemainSec *int64
        + DayRemainSec *int64
        + HourReward []*AwardProp
        + DayReward []*AwardProp
        + DayLuckyNums []int64
        + Score *int32
        + HourTotal *int32
        + DayTotal *int32
        + HourAwardNum *int32
        + DayAwardNum *int32
        + NextStartTick *int64
        + TaskInfo []*LuckyTaskInfo
        + ExchangeScore *int32
        + NextRemainSec *int64
        + HourLuckyNums []int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + HourRemainSec *int64
        + DayRemainSec *int64
        + HourReward []*AwardProp
        + DayReward []*AwardProp
        + DayLuckyNums []int64
        + Score *int32
        + HourTotal *int32
        + DayTotal *int32
        + HourAwardNum *int32
        + DayAwardNum *int32
        + NextStartTick *int64
        + TaskInfo []*LuckyTaskInfo
        + ExchangeScore *int32
        + NextRemainSec *int64
        + HourLuckyNums []int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetHourRemainSec() int64
        + GetDayRemainSec() int64
        + GetHourReward() []*AwardProp
        + GetDayReward() []*AwardProp
        + GetDayLuckyNums() []int64
        + GetScore() int32
        + GetHourTotal() int32
        + GetDayTotal() int32
        + GetHourAwardNum() int32
        + GetDayAwardNum() int32
        + GetNextStartTick() int64
        + GetTaskInfo() []*LuckyTaskInfo
        + GetExchangeScore() int32
        + GetNextRemainSec() int64
        + GetHourLuckyNums() []int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetHourRemainSec() int64
        + GetDayRemainSec() int64
        + GetHourReward() []*AwardProp
        + GetDayReward() []*AwardProp
        + GetDayLuckyNums() []int64
        + GetScore() int32
        + GetHourTotal() int32
        + GetDayTotal() int32
        + GetHourAwardNum() int32
        + GetDayAwardNum() int32
        + GetNextStartTick() int64
        + GetTaskInfo() []*LuckyTaskInfo
        + GetExchangeScore() int32
        + GetNextRemainSec() int64
        + GetHourLuckyNums() []int64

    }
    class SCLuckyRecord << (S,Aquamarine) >> {
        + Type *int32
        + Record []*LuckyRecord
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Type *int32
        + Record []*LuckyRecord
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetType() int32
        + GetRecord() []*LuckyRecord
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetType() int32
        + GetRecord() []*LuckyRecord

    }
    class SCLuckyRedDot << (S,Aquamarine) >> {
        + Show *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Show *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetShow() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetShow() bool

    }
    class SCLuckyTaskInfo << (S,Aquamarine) >> {
        + Task *LuckyTaskInfo
        + Score *int32
        + Code *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Task *LuckyTaskInfo
        + Score *int32
        + Code *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetTask() *LuckyTaskInfo
        + GetScore() int32
        + GetCode() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetTask() *LuckyTaskInfo
        + GetScore() int32
        + GetCode() int32

    }
    class SCMatchPackAddition << (S,Aquamarine) >> {
        + Addition []*MatchPackAddition
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Addition []*MatchPackAddition
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetAddition() []*MatchPackAddition
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetAddition() []*MatchPackAddition

    }
    class SCMatchPackInvail << (S,Aquamarine) >> {
        + PackId *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + PackId *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetPackId() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetPackId() string

    }
    class SCMatchResult << (S,Aquamarine) >> {
        + MatchId *int32
        + RankList []*ResultRank
        + IsPack *bool
        + OneselfRank *int64
        + AdditionSource *int32
        + ReawardAddition *int64
        + MatchGoods []*Object3
        + PackGoods []*Object3
        + LuckyGoods []*Object3
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + MatchId *int32
        + RankList []*ResultRank
        + IsPack *bool
        + OneselfRank *int64
        + AdditionSource *int32
        + ReawardAddition *int64
        + MatchGoods []*Object3
        + PackGoods []*Object3
        + LuckyGoods []*Object3
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetMatchId() int32
        + GetRankList() []*ResultRank
        + GetIsPack() bool
        + GetOneselfRank() int64
        + GetAdditionSource() int32
        + GetReawardAddition() int64
        + GetMatchGoods() []*Object3
        + GetPackGoods() []*Object3
        + GetLuckyGoods() []*Object3
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetMatchId() int32
        + GetRankList() []*ResultRank
        + GetIsPack() bool
        + GetOneselfRank() int64
        + GetAdditionSource() int32
        + GetReawardAddition() int64
        + GetMatchGoods() []*Object3
        + GetPackGoods() []*Object3
        + GetLuckyGoods() []*Object3

    }
    class SCNewYearCardAwardRecord << (S,Aquamarine) >> {
        + Result *int32
        + Records []*NewYearCardAwardRecord
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Result *int32
        + Records []*NewYearCardAwardRecord
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetResult() int32
        + GetRecords() []*NewYearCardAwardRecord
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetResult() int32
        + GetRecords() []*NewYearCardAwardRecord

    }
    class SCNewYearCardExchange << (S,Aquamarine) >> {
        + ChairIdx *int32
        + Result *int32
        + Awards []*NewYearCardAward
        + Score *int32
        + Count *int32
        + ExchangeAll *bool
        + ReqId *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + Result *int32
        + Awards []*NewYearCardAward
        + Score *int32
        + Count *int32
        + ExchangeAll *bool
        + ReqId *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetResult() int32
        + GetAwards() []*NewYearCardAward
        + GetScore() int32
        + GetCount() int32
        + GetExchangeAll() bool
        + GetReqId() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetResult() int32
        + GetAwards() []*NewYearCardAward
        + GetScore() int32
        + GetCount() int32
        + GetExchangeAll() bool
        + GetReqId() int32

    }
    class SCNotifyLogout << (S,Aquamarine) >> {
        + ChairIdx *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32

    }
    class SCOwnRecord << (S,Aquamarine) >> {
        + Record []*OwnRecord
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Record []*OwnRecord
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetRecord() []*OwnRecord
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetRecord() []*OwnRecord

    }
    class SCPropDropNotify << (S,Aquamarine) >> {
        + ChairIdx *int32
        + FishUid *int32
        + PropId *int32
        + Count *int32
        + LockRatio *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + FishUid *int32
        + PropId *int32
        + Count *int32
        + LockRatio *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetFishUid() int32
        + GetPropId() int32
        + GetCount() int32
        + GetLockRatio() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetFishUid() int32
        + GetPropId() int32
        + GetCount() int32
        + GetLockRatio() int32

    }
    class SCPropEndNotify << (S,Aquamarine) >> {
        + ChairIdx *int32
        + PropId *int32
        + Status *int32
        + FreeLevel *int32
        + FreeTimes *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + PropId *int32
        + Status *int32
        + FreeLevel *int32
        + FreeTimes *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetPropId() int32
        + GetStatus() int32
        + GetFreeLevel() int32
        + GetFreeTimes() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetPropId() int32
        + GetStatus() int32
        + GetFreeLevel() int32
        + GetFreeTimes() int32

    }
    class SCPropsAwardPool << (S,Aquamarine) >> {
        + Enable *bool
        + Objects []*ObjectData
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Enable *bool
        + Objects []*ObjectData
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetEnable() bool
        + GetObjects() []*ObjectData
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetEnable() bool
        + GetObjects() []*ObjectData

    }
    class SCPropsTorpedo << (S,Aquamarine) >> {
        + Enable *bool
        + Objects []*ObjectData
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Enable *bool
        + Objects []*ObjectData
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetEnable() bool
        + GetObjects() []*ObjectData
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetEnable() bool
        + GetObjects() []*ObjectData

    }
    class SCPropsTrident << (S,Aquamarine) >> {
        + Enable *bool
        + SingleScore *int32
        + CurScore *int32
        + RankEnable *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Enable *bool
        + SingleScore *int32
        + CurScore *int32
        + RankEnable *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetEnable() bool
        + GetSingleScore() int32
        + GetCurScore() int32
        + GetRankEnable() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetEnable() bool
        + GetSingleScore() int32
        + GetCurScore() int32
        + GetRankEnable() bool

    }
    class SCPurchaseCheck << (S,Aquamarine) >> {
        + IsPurchase *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + IsPurchase *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIsPurchase() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIsPurchase() int32

    }
    class SCScratchNewYearCard << (S,Aquamarine) >> {
        + Result *int32
        + ChairIdx *int32
        + CurScore *int32
        + Base *int32
        + Count *int32
        + Multiples []*NewYearCardMultiple
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Result *int32
        + ChairIdx *int32
        + CurScore *int32
        + Base *int32
        + Count *int32
        + Multiples []*NewYearCardMultiple
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetResult() int32
        + GetChairIdx() int32
        + GetCurScore() int32
        + GetBase() int32
        + GetCount() int32
        + GetMultiples() []*NewYearCardMultiple
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetResult() int32
        + GetChairIdx() int32
        + GetCurScore() int32
        + GetBase() int32
        + GetCount() int32
        + GetMultiples() []*NewYearCardMultiple

    }
    class SCSetProbability << (S,Aquamarine) >> {
        + ChairIdx *int32
        + GunRatio *int32
        + GunLevel *int32
        + IsUnlock *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + GunRatio *int32
        + GunLevel *int32
        + IsUnlock *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetGunRatio() int32
        + GetGunLevel() int32
        + GetIsUnlock() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetGunRatio() int32
        + GetGunLevel() int32
        + GetIsUnlock() bool

    }
    class SCSetSkill << (S,Aquamarine) >> {
        + ChairIdx *int32
        + DoubleFlag *int32
        + ThroughFlag *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + DoubleFlag *int32
        + ThroughFlag *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetDoubleFlag() int32
        + GetThroughFlag() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetDoubleFlag() int32
        + GetThroughFlag() int32

    }
    class SCShootTorpedo << (S,Aquamarine) >> {
        + ChairIdx *int32
        + TorpedoId *string
        + Award *int32
        + Score *int64
        + Objects []*ObjectData
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + TorpedoId *string
        + Award *int32
        + Score *int64
        + Objects []*ObjectData
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetTorpedoId() string
        + GetAward() int32
        + GetScore() int64
        + GetObjects() []*ObjectData
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetTorpedoId() string
        + GetAward() int32
        + GetScore() int64
        + GetObjects() []*ObjectData

    }
    class SCSuperTridentShoot << (S,Aquamarine) >> {
        + ChairIdx *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32

    }
    class SCSyncFishReq << (S,Aquamarine) >> {
        + ChairIdx *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32

    }
    class SCSyncFishRsp << (S,Aquamarine) >> {
        + FishTraces []*SyncFishTraces
        + AccelerateFlag *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + FishTraces []*SyncFishTraces
        + AccelerateFlag *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetFishTraces() []*SyncFishTraces
        + GetAccelerateFlag() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetFishTraces() []*SyncFishTraces
        + GetAccelerateFlag() bool

    }
    class SCSyncFortune << (S,Aquamarine) >> {
        + IngotInfo *IngotInfo
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + IngotInfo *IngotInfo
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIngotInfo() *IngotInfo
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIngotInfo() *IngotInfo

    }
    class SCSyncFreeTimes << (S,Aquamarine) >> {
        + Times *int32
        + Level *int32
        + ChairIdx *int32
        + Type *int32
        + Exchange *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Times *int32
        + Level *int32
        + ChairIdx *int32
        + Type *int32
        + Exchange *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetTimes() int32
        + GetLevel() int32
        + GetChairIdx() int32
        + GetType() int32
        + GetExchange() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetTimes() int32
        + GetLevel() int32
        + GetChairIdx() int32
        + GetType() int32
        + GetExchange() int32

    }
    class SCSyncMoney << (S,Aquamarine) >> {
        + ChairIdx *int32
        + Score *int64
        + Type *int32
        + Delta *int32
        + InvalidScore *int32
        + FreetimeScore *int32
        + Ticket *int32
        + IngotScore *int32
        + GeneralRp *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + Score *int64
        + Type *int32
        + Delta *int32
        + InvalidScore *int32
        + FreetimeScore *int32
        + Ticket *int32
        + IngotScore *int32
        + GeneralRp *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetScore() int64
        + GetType() int32
        + GetDelta() int32
        + GetInvalidScore() int32
        + GetFreetimeScore() int32
        + GetTicket() int32
        + GetIngotScore() int32
        + GetGeneralRp() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetScore() int64
        + GetType() int32
        + GetDelta() int32
        + GetInvalidScore() int32
        + GetFreetimeScore() int32
        + GetTicket() int32
        + GetIngotScore() int32
        + GetGeneralRp() int64

    }
    class SCTaskInfo << (S,Aquamarine) >> {
        + GunRatio *int32
        + GunLevel *int32
        + CurNum *int32
        + TotalNum *int32
        + VipLevel *int32
        + IsUnlock *int32
        + Award *int32
        + IsVipUnlock *bool
        + Ticket *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + GunRatio *int32
        + GunLevel *int32
        + CurNum *int32
        + TotalNum *int32
        + VipLevel *int32
        + IsUnlock *int32
        + Award *int32
        + IsVipUnlock *bool
        + Ticket *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetGunRatio() int32
        + GetGunLevel() int32
        + GetCurNum() int32
        + GetTotalNum() int32
        + GetVipLevel() int32
        + GetIsUnlock() int32
        + GetAward() int32
        + GetIsVipUnlock() bool
        + GetTicket() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetGunRatio() int32
        + GetGunLevel() int32
        + GetCurNum() int32
        + GetTotalNum() int32
        + GetVipLevel() int32
        + GetIsUnlock() int32
        + GetAward() int32
        + GetIsVipUnlock() bool
        + GetTicket() int32

    }
    class SCTridentBet << (S,Aquamarine) >> {
        + ChairIdx *int32
        + Award *int32
        + Score *int64
        + Bet *int32
        + IsBigSmall *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + Award *int32
        + Score *int64
        + Bet *int32
        + IsBigSmall *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetAward() int32
        + GetScore() int64
        + GetBet() int32
        + GetIsBigSmall() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetAward() int32
        + GetScore() int64
        + GetBet() int32
        + GetIsBigSmall() bool

    }
    class SCTridentInfo << (S,Aquamarine) >> {
        + Bets []int32
        + IsFull *bool
        + CurPoint *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Bets []int32
        + IsFull *bool
        + CurPoint *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetBets() []int32
        + GetIsFull() bool
        + GetCurPoint() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetBets() []int32
        + GetIsFull() bool
        + GetCurPoint() int32

    }
    class SCUserPoolAdd << (S,Aquamarine) >> {
        + Add *int32
        + Count *int32
        + FirstMax *int32
        + PoolMax *int32
        + Status *bool
        + LevelName *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Add *int32
        + Count *int32
        + FirstMax *int32
        + PoolMax *int32
        + Status *bool
        + LevelName *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetAdd() int32
        + GetCount() int32
        + GetFirstMax() int32
        + GetPoolMax() int32
        + GetStatus() bool
        + GetLevelName() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetAdd() int32
        + GetCount() int32
        + GetFirstMax() int32
        + GetPoolMax() int32
        + GetStatus() bool
        + GetLevelName() string

    }
    class SCUserPoolDraw << (S,Aquamarine) >> {
        + ChairIdx *int32
        + Goods []*Object2
        + Award *Object2
        + AwardCnt *Object3
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + Goods []*Object2
        + Award *Object2
        + AwardCnt *Object3
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetGoods() []*Object2
        + GetAward() *Object2
        + GetAwardCnt() *Object3
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetGoods() []*Object2
        + GetAward() *Object2
        + GetAwardCnt() *Object3

    }
    class SCUserPoolInfo << (S,Aquamarine) >> {
        + ChairIdx *int32
        + OpenPage *bool
        + Status *bool
        + Count *int32
        + PoolMax *int32
        + Items []*UserAwardItem
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + OpenPage *bool
        + Status *bool
        + Count *int32
        + PoolMax *int32
        + Items []*UserAwardItem
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetOpenPage() bool
        + GetStatus() bool
        + GetCount() int32
        + GetPoolMax() int32
        + GetItems() []*UserAwardItem
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetOpenPage() bool
        + GetStatus() bool
        + GetCount() int32
        + GetPoolMax() int32
        + GetItems() []*UserAwardItem

    }
    class SCUserPoolPreDraw << (S,Aquamarine) >> {
        + Code *int32
        + Level *int32
        + Msg *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Code *int32
        + Level *int32
        + Msg *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetCode() int32
        + GetLevel() int32
        + GetMsg() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetCode() int32
        + GetLevel() int32
        + GetMsg() string

    }
    class SCUserPoolStatus << (S,Aquamarine) >> {
        + Open *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Open *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetOpen() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetOpen() bool

    }
    class SCUserReady << (S,Aquamarine) >> {
        + StationBaseList []*StationBase
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + StationBaseList []*StationBase
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetStationBaseList() []*StationBase
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetStationBaseList() []*StationBase

    }
    class SCUserRunBackground << (S,Aquamarine) >> {
        + StationBaseList []*StationBase
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + StationBaseList []*StationBase
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetStationBaseList() []*StationBase
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetStationBaseList() []*StationBase

    }
    class SCUserShootMulti << (S,Aquamarine) >> {
        + ChairIdx *int32
        + BulletInfo []*UserShootRsp
        + Score *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + BulletInfo []*UserShootRsp
        + Score *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetBulletInfo() []*UserShootRsp
        + GetScore() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetBulletInfo() []*UserShootRsp
        + GetScore() int64

    }
    class SCUserTimeoutKick << (S,Aquamarine) >> {
        + CountSec *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + CountSec *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetCountSec() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetCountSec() int32

    }
    class SCVipInfo << (S,Aquamarine) >> {
        + ChairIdx *int32
        + CurVip *int32
        + Trident1Vip *int32
        + Trident2Vip *int32
        + Trident3Vip *int32
        + Trident4Vip *int32
        + Trident5Vip *int32
        + DoubleShootVip *int32
        + LockShootVip *int32
        + GoldenGunVip *int32
        + PaladinGunVip *int32
        + PandaGunVip *int32
        + FortuneCat *bool
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + CurVip *int32
        + Trident1Vip *int32
        + Trident2Vip *int32
        + Trident3Vip *int32
        + Trident4Vip *int32
        + Trident5Vip *int32
        + DoubleShootVip *int32
        + LockShootVip *int32
        + GoldenGunVip *int32
        + PaladinGunVip *int32
        + PandaGunVip *int32
        + FortuneCat *bool
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetCurVip() int32
        + GetTrident1Vip() int32
        + GetTrident2Vip() int32
        + GetTrident3Vip() int32
        + GetTrident4Vip() int32
        + GetTrident5Vip() int32
        + GetDoubleShootVip() int32
        + GetLockShootVip() int32
        + GetGoldenGunVip() int32
        + GetPaladinGunVip() int32
        + GetPandaGunVip() int32
        + GetFortuneCat() bool
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetCurVip() int32
        + GetTrident1Vip() int32
        + GetTrident2Vip() int32
        + GetTrident3Vip() int32
        + GetTrident4Vip() int32
        + GetTrident5Vip() int32
        + GetDoubleShootVip() int32
        + GetLockShootVip() int32
        + GetGoldenGunVip() int32
        + GetPaladinGunVip() int32
        + GetPandaGunVip() int32
        + GetFortuneCat() bool

    }
    class SSAwardPoolMsg << (S,Aquamarine) >> {
        + UniqueID *int32
        + ArenaID *int32
        + PoolID *int32
        + Delta *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + UniqueID *int32
        + ArenaID *int32
        + PoolID *int32
        + Delta *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetUniqueID() int32
        + GetArenaID() int32
        + GetPoolID() int32
        + GetDelta() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetUniqueID() int32
        + GetArenaID() int32
        + GetPoolID() int32
        + GetDelta() int32

    }
    class SkillTime << (S,Aquamarine) >> {
        + Type *int32
        + Time *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Type *int32
        + Time *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetType() int32
        + GetTime() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetType() int32
        + GetTime() int32

    }
    class SmallFish << (S,Aquamarine) >> {
        + FishUid *int32
        + FishId *int32
        + X *float32
        + Y *float32
        + Time *float32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + FishUid *int32
        + FishId *int32
        + X *float32
        + Y *float32
        + Time *float32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetFishUid() int32
        + GetFishId() int32
        + GetX() float32
        + GetY() float32
        + GetTime() float32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetFishUid() int32
        + GetFishId() int32
        + GetX() float32
        + GetY() float32
        + GetTime() float32

    }
    class StationBase << (S,Aquamarine) >> {
        + GunRatio *int32
        + GunLevel *int32
        + IsOnline *bool
        + UserSocre *int64
        + ChairIdx *int32
        + PlayerName *string
        + ThroughFlag *bool
        + DoubleFlag *bool
        + PlayerId *int64
        + Vip *int32
        + Ticket *int32
        + EffectId *int32
        + GeneralRp *int64
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + GunRatio *int32
        + GunLevel *int32
        + IsOnline *bool
        + UserSocre *int64
        + ChairIdx *int32
        + PlayerName *string
        + ThroughFlag *bool
        + DoubleFlag *bool
        + PlayerId *int64
        + Vip *int32
        + Ticket *int32
        + EffectId *int32
        + GeneralRp *int64
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetGunRatio() int32
        + GetGunLevel() int32
        + GetIsOnline() bool
        + GetUserSocre() int64
        + GetChairIdx() int32
        + GetPlayerName() string
        + GetThroughFlag() bool
        + GetDoubleFlag() bool
        + GetPlayerId() int64
        + GetVip() int32
        + GetTicket() int32
        + GetEffectId() int32
        + GetGeneralRp() int64
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetGunRatio() int32
        + GetGunLevel() int32
        + GetIsOnline() bool
        + GetUserSocre() int64
        + GetChairIdx() int32
        + GetPlayerName() string
        + GetThroughFlag() bool
        + GetDoubleFlag() bool
        + GetPlayerId() int64
        + GetVip() int32
        + GetTicket() int32
        + GetEffectId() int32
        + GetGeneralRp() int64

    }
    class SyncFishTraces << (S,Aquamarine) >> {
        + FishUid *int32
        + FishId *int32
        + LiveTime *int32
        + Speed *float32
        + RouteType *int32
        + FishTrace []*FishTrace
        + FishCurPoint *int32
        + AlreadyMove *bool
        + X *float32
        + Y *float32
        + Time *float32
        + Stage *int32
        + SubStage *int32
        + Lifespan *int32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + FishUid *int32
        + FishId *int32
        + LiveTime *int32
        + Speed *float32
        + RouteType *int32
        + FishTrace []*FishTrace
        + FishCurPoint *int32
        + AlreadyMove *bool
        + X *float32
        + Y *float32
        + Time *float32
        + Stage *int32
        + SubStage *int32
        + Lifespan *int32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetFishUid() int32
        + GetFishId() int32
        + GetLiveTime() int32
        + GetSpeed() float32
        + GetRouteType() int32
        + GetFishTrace() []*FishTrace
        + GetFishCurPoint() int32
        + GetAlreadyMove() bool
        + GetX() float32
        + GetY() float32
        + GetTime() float32
        + GetStage() int32
        + GetSubStage() int32
        + GetLifespan() int32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetFishUid() int32
        + GetFishId() int32
        + GetLiveTime() int32
        + GetSpeed() float32
        + GetRouteType() int32
        + GetFishTrace() []*FishTrace
        + GetFishCurPoint() int32
        + GetAlreadyMove() bool
        + GetX() float32
        + GetY() float32
        + GetTime() float32
        + GetStage() int32
        + GetSubStage() int32
        + GetLifespan() int32

    }
    class UnimplementedBydldServer << (S,Aquamarine) >> {
        + Req_LoginGameWithToken(ctx "context.Context, req *CSLoginGameWithToken) (*SCLoginGameWithToken, error)
        + Req_SetProbability(ctx "context.Context, req *CSSetProbability) (*CommonResp, error)
        + Req_FishOutsideScreen(ctx "context.Context, req *CSFishOutsideScreen) (*CommonResp, error)
        + Req_LockFish(ctx "context.Context, req *CSLockFish) (*CommonResp, error)
        + Req_UserShootMulti(ctx "context.Context, req *CSUserShootMulti) (*CommonResp, error)
        + Req_HitMultiFish(ctx "context.Context, req *CSHitMultiFish) (*CommonResp, error)
        + Req_SetSkill(ctx "context.Context, req *CSSetSkill) (*CommonResp, error)
        + Req_SyncMoney(ctx "context.Context, req *CSSyncMoney) (*CommonResp, error)
        + Req_UserReady(ctx "context.Context, req *CSUserReady) (*CommonResp, error)
        + Req_SyncFishReq(ctx "context.Context, req *CSSyncFishReq) (*CommonResp, error)
        + Req_SyncFishRsp(ctx "context.Context, req *CSSyncFishRsp) (*CommonResp, error)
        + Req_UserRunBackground(ctx "context.Context, req *CSUserRunBackground) (*CommonResp, error)
        + Req_TridentInfo(ctx "context.Context, req *CSTridentInfo) (*SCTridentInfo, error)
        + Req_TridentBet(ctx "context.Context, req *CSTridentBet) (*CommonResp, error)
        + Req_ShootTorpedo(ctx "context.Context, req *CSShootTorpedo) (*CommonResp, error)
        + Req_SuperTridentShoot(ctx "context.Context, req *CSSuperTridentShoot) (*CommonResp, error)
        + Req_SuperTridentAttack(ctx "context.Context, req *CSSuperTridentAttack) (*CommonResp, error)
        + Req_FreeTimeEnd(ctx "context.Context, req *CSFreeTimeEnd) (*CommonResp, error)
        + Req_BigSmallChoose(ctx "context.Context, req *CSBigSmallChoose) (*CommonResp, error)
        + Req_BigSmallBet(ctx "context.Context, req *CSBigSmallBet) (*CommonResp, error)
        + Req_UserScoreRecord(ctx "context.Context, req *UserScoreRecord) (*CommonResp, error)
        + Req_ScratchNewYearCard(ctx "context.Context, req *CSScratchNewYearCard) (*CommonResp, error)
        + Req_BuyNewYearCard(ctx "context.Context, req *CSBuyNewYearCard) (*CommonResp, error)
        + Req_NewYearCardExchange(ctx "context.Context, req *CSNewYearCardExchange) (*CommonResp, error)
        + Req_NewYearCardAwardRecord(ctx "context.Context, req *CSNewYearCardAwardRecord) (*CommonResp, error)
        + Req_ClickStatistic(ctx "context.Context, req *CSClickStatistic) (*CommonResp, error)
        + Req_TaskInfo(ctx "context.Context, req *CSTaskInfo) (*CommonResp, error)
        + Req_ComTask(ctx "context.Context, req *CSComTask) (*CommonResp, error)
        + Req_SaveSkillTime(ctx "context.Context, req *CSSaveSkillTime) (*CommonResp, error)
        + Req_AwardPoolRecord(ctx "context.Context, req *CSAwardPoolRecord) (*SCAwardPoolRecord, error)
        + Req_MatchPackAddition(ctx "context.Context, req *CSMatchPackAddition) (*CommonResp, error)
        + Req_FortuneShoot(ctx "context.Context, req *CSFortuneShoot) (*CommonResp, error)
        + Req_UserPoolInfo(ctx "context.Context, req *CSUserPoolInfo) (*SCUserPoolInfo, error)
        + Req_UserPoolStatus(ctx "context.Context, req *CSUserPoolStatus) (*SCUserPoolStatus, error)
        + Req_UserPoolPreDraw(ctx "context.Context, req *CSUserPoolPreDraw) (*SCUserPoolPreDraw, error)
        + Req_UserPoolDraw(ctx "context.Context, req *CSUserPoolDraw) (*SCUserPoolDraw, error)
        + Req_GetLuckyNum(ctx "context.Context, req *CSGetLuckyNum) (*CommonResp, error)
        + Req_LuckyDrawInfo(ctx "context.Context, req *CSLuckyDrawInfo) (*CommonResp, error)
        + Req_GetLuckyTaskAward(ctx "context.Context, req *CSGetLuckyTaskAward) (*CommonResp, error)
        + Req_LuckyRedDot(ctx "context.Context, req *CSLuckyRedDot) (*CommonResp, error)
        + Req_LuckyRecord(ctx "context.Context, req *CSLuckyRecord) (*CommonResp, error)
        + Req_DragonWheel(ctx "context.Context, req *CSDragonWheelStart) (*CommonResp, error)
        + Req_FragmentTaskData(ctx "context.Context, req *CSFragmentTaskData) (*SCFragmentTaskData, error)
        + Req_FragmentTaskReward(ctx "context.Context, req *CSFragmentTaskReward) (*SCFragmentTaskReward, error)

    }
    class UserAwardItem << (S,Aquamarine) >> {
        + Index *int32
        + ItemMax *int32
        + Name *string
        + Goods []*Object2
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Index *int32
        + ItemMax *int32
        + Name *string
        + Goods []*Object2
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetIndex() int32
        + GetItemMax() int32
        + GetName() string
        + GetGoods() []*Object2
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetIndex() int32
        + GetItemMax() int32
        + GetName() string
        + GetGoods() []*Object2

    }
    class UserPoolActivityInfo << (S,Aquamarine) >> {
        + UserPoolShow *bool
        + AwardFish []int32
        + UserPoolLimit []*Object3
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + UserPoolShow *bool
        + AwardFish []int32
        + UserPoolLimit []*Object3
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetUserPoolShow() bool
        + GetAwardFish() []int32
        + GetUserPoolLimit() []*Object3
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetUserPoolShow() bool
        + GetAwardFish() []int32
        + GetUserPoolLimit() []*Object3

    }
    class UserProp << (S,Aquamarine) >> {
        + ChairIdx *int32
        + Props []*Prop
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + ChairIdx *int32
        + Props []*Prop
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetChairIdx() int32
        + GetProps() []*Prop
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetChairIdx() int32
        + GetProps() []*Prop

    }
    class UserScoreRecord << (S,Aquamarine) >> {
        + Type *int32
        + Content *string
        + Score *string
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Type *int32
        + Content *string
        + Score *string
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetType() int32
        + GetContent() string
        + GetScore() string
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetType() int32
        + GetContent() string
        + GetScore() string

    }
    class UserShoot << (S,Aquamarine) >> {
        + Angle *int32
        + BulletId *int32
        + Ratio *int32
        + IsDouble *bool
        + IsThrough *bool
        + IsFreeTime *bool
        + BulletType *int32
        + X *float32
        + Y *float32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Angle *int32
        + BulletId *int32
        + Ratio *int32
        + IsDouble *bool
        + IsThrough *bool
        + IsFreeTime *bool
        + BulletType *int32
        + X *float32
        + Y *float32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetAngle() int32
        + GetBulletId() int32
        + GetRatio() int32
        + GetIsDouble() bool
        + GetIsThrough() bool
        + GetIsFreeTime() bool
        + GetBulletType() int32
        + GetX() float32
        + GetY() float32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetAngle() int32
        + GetBulletId() int32
        + GetRatio() int32
        + GetIsDouble() bool
        + GetIsThrough() bool
        + GetIsFreeTime() bool
        + GetBulletType() int32
        + GetX() float32
        + GetY() float32

    }
    class UserShootRsp << (S,Aquamarine) >> {
        + Angle *int32
        + BulletType *int32
        + X *float32
        + Y *float32
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + Angle *int32
        + BulletType *int32
        + X *float32
        + Y *float32
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetAngle() int32
        + GetBulletType() int32
        + GetX() float32
        + GetY() float32
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetAngle() int32
        + GetBulletType() int32
        + GetX() float32
        + GetY() float32

    }
    class UsersProp << (S,Aquamarine) >> {
        + UserProp []*UserProp
        + XXX_NoUnkeyedLiteral <font color=blue>struct</font>{}
        + XXX_unrecognized []byte
        + XXX_sizecache int32
        + UserProp []*UserProp
        + XXX_unrecognized []byte

        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + XXX_Unmarshal(b []byte) error
        + XXX_Marshal(b []byte, deterministic bool) ([]byte, error)
        + XXX_Merge(src proto.Message) 
        + XXX_Size() int
        + XXX_DiscardUnknown() 
        + GetUserProp() []*UserProp
        + Marshal() ([]byte, error)
        + MarshalTo(dAtA []byte) (int, error)
        + MarshalToSizedBuffer(dAtA []byte) (int, error)
        + Size() int
        + Unmarshal(dAtA []byte) error
        + Reset() 
        + String() string
        + ProtoMessage() 
        + Descriptor() ([]byte, []int)
        + GetUserProp() []*UserProp

    }
    class api.ErrCode << (T, #FF7700) >>  {
    }
    class api.GameCommand << (T, #FF7700) >>  {
    }
    class bydldClient << (S,Aquamarine) >> {
        - cc *grpc.ClientConn

        + Req_LoginGameWithToken(ctx "context.Context, in *CSLoginGameWithToken, opts ...grpc.CallOption) (*SCLoginGameWithToken, error)
        + Req_SetProbability(ctx "context.Context, in *CSSetProbability, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_FishOutsideScreen(ctx "context.Context, in *CSFishOutsideScreen, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_LockFish(ctx "context.Context, in *CSLockFish, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_UserShootMulti(ctx "context.Context, in *CSUserShootMulti, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_HitMultiFish(ctx "context.Context, in *CSHitMultiFish, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SetSkill(ctx "context.Context, in *CSSetSkill, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SyncMoney(ctx "context.Context, in *CSSyncMoney, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_UserReady(ctx "context.Context, in *CSUserReady, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SyncFishReq(ctx "context.Context, in *CSSyncFishReq, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SyncFishRsp(ctx "context.Context, in *CSSyncFishRsp, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_UserRunBackground(ctx "context.Context, in *CSUserRunBackground, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_TridentInfo(ctx "context.Context, in *CSTridentInfo, opts ...grpc.CallOption) (*SCTridentInfo, error)
        + Req_TridentBet(ctx "context.Context, in *CSTridentBet, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_ShootTorpedo(ctx "context.Context, in *CSShootTorpedo, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SuperTridentShoot(ctx "context.Context, in *CSSuperTridentShoot, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SuperTridentAttack(ctx "context.Context, in *CSSuperTridentAttack, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_FreeTimeEnd(ctx "context.Context, in *CSFreeTimeEnd, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_BigSmallChoose(ctx "context.Context, in *CSBigSmallChoose, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_BigSmallBet(ctx "context.Context, in *CSBigSmallBet, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_UserScoreRecord(ctx "context.Context, in *UserScoreRecord, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_ScratchNewYearCard(ctx "context.Context, in *CSScratchNewYearCard, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_BuyNewYearCard(ctx "context.Context, in *CSBuyNewYearCard, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_NewYearCardExchange(ctx "context.Context, in *CSNewYearCardExchange, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_NewYearCardAwardRecord(ctx "context.Context, in *CSNewYearCardAwardRecord, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_ClickStatistic(ctx "context.Context, in *CSClickStatistic, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_TaskInfo(ctx "context.Context, in *CSTaskInfo, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_ComTask(ctx "context.Context, in *CSComTask, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_SaveSkillTime(ctx "context.Context, in *CSSaveSkillTime, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_AwardPoolRecord(ctx "context.Context, in *CSAwardPoolRecord, opts ...grpc.CallOption) (*SCAwardPoolRecord, error)
        + Req_MatchPackAddition(ctx "context.Context, in *CSMatchPackAddition, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_FortuneShoot(ctx "context.Context, in *CSFortuneShoot, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_UserPoolInfo(ctx "context.Context, in *CSUserPoolInfo, opts ...grpc.CallOption) (*SCUserPoolInfo, error)
        + Req_UserPoolStatus(ctx "context.Context, in *CSUserPoolStatus, opts ...grpc.CallOption) (*SCUserPoolStatus, error)
        + Req_UserPoolPreDraw(ctx "context.Context, in *CSUserPoolPreDraw, opts ...grpc.CallOption) (*SCUserPoolPreDraw, error)
        + Req_UserPoolDraw(ctx "context.Context, in *CSUserPoolDraw, opts ...grpc.CallOption) (*SCUserPoolDraw, error)
        + Req_GetLuckyNum(ctx "context.Context, in *CSGetLuckyNum, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_LuckyDrawInfo(ctx "context.Context, in *CSLuckyDrawInfo, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_GetLuckyTaskAward(ctx "context.Context, in *CSGetLuckyTaskAward, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_LuckyRedDot(ctx "context.Context, in *CSLuckyRedDot, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_LuckyRecord(ctx "context.Context, in *CSLuckyRecord, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_DragonWheel(ctx "context.Context, in *CSDragonWheelStart, opts ...grpc.CallOption) (*CommonResp, error)
        + Req_FragmentTaskData(ctx "context.Context, in *CSFragmentTaskData, opts ...grpc.CallOption) (*SCFragmentTaskData, error)
        + Req_FragmentTaskReward(ctx "context.Context, in *CSFragmentTaskReward, opts ...grpc.CallOption) (*SCFragmentTaskReward, error)

    }
}

"api.BydldServer" <|-- "api.UnimplementedBydldServer"
"api.BydldClient" <|-- "api.bydldClient"

namespace awardmgr {
    class AwardPool << (S,Aquamarine) >> {
        - mapPool <font color=blue>map</font>[int32]*player.MoneyPool
        - poolRewardTime <font color=blue>map</font>[int32]int64
        - saveTime int64
        - lock sync.Mutex
        - gameId int32
        - arenaId int32

        - save() 
        - refresh() bool
        - triggerAwardPool(cost int64) 
        - addPoolMoney(cost int64) 
        - rewardInterval(poolId int32) bool
        - meetAward(p player.IPlayer, poolMulti <font color=blue>map</font>[int32]int32) int32
        - giveAward(pid int64, poolId int32) bool
        - getPool(poolId int32) *player.MoneyPool
        - rewardHandle(p player.IPlayer, ratio int32, poolId int32, award int64) 
        - bigAwardRecord(p player.IPlayer, ratio int32, poolId int32, award int64, nickName string) 
        - awardNotify(p player.IPlayer, poolId int32, award int32) 
        - setAwardTick(poolId int32, t int64) 

        + Start(gameId int32, arenaId int32) 
        + Polling() 
        + UpdatePoolToClient(mid string) 
        + AvoidHurt(cost int64) bool
        + ChangeFakePool() 

    }
    class awardPoolUpdateInfo << (S,Aquamarine) >> {
        + GameId int32
        + ArenaId int32
        + AwardPoolType int32
        + Pools <font color=blue>map</font>[int32]int64
        + Remark string

    }
}

"global.IAwardPool" <|-- "awardmgr.AwardPool"

namespace base {
    interface IWheelItem  {
        + GetWeight() int

    }
}


namespace config {
    class AtomicBombConf << (S,Aquamarine) >> {
        + BackgroundSec int32
        + Config AtomicBombInfo

    }
    class AtomicBombInfo << (S,Aquamarine) >> {
        + Consume int32
        + HitFishes int32
        + MaxIndex int32
        + RoundsMap <font color=blue>map</font>[int32][]HitInfo

    }
    class AvoidHurtConf << (S,Aquamarine) >> {
        + ArenaID int32
        + Left int32
        + Right int32

    }
    class AvoidHurtInfo << (S,Aquamarine) >> {
        + Ratio int32
        + Base int32

    }
    class AwardCalcInfo << (S,Aquamarine) >> {
        + AgencyLevel int64
        + MinRatio float32
        + MaxRatio float32
        + RandTime int32
        + Ratio float32
        + Left float32
        + Right float32

        + GetAward(worth int32) int32

    }
    class AwardConf << (S,Aquamarine) >> {
        + ConfigMap <font color=blue>map</font>[int32]AwardConfInfo

    }
    class AwardConfInfo << (S,Aquamarine) >> {
        + Section int32
        + TriggerValue int32
        + Base int32
        + Ratio int32
        + IncreaseRatio int32
        + IncreaseValue int32
        + MaxTriggerValue int32
        + LuckMin int32
        + LuckMax int32
        + MinRatio int32
        + MaxRatio int32
        + RemainScore int32
        + FreeLevel int32
        + AwardRatio int32

    }
    class AwardControlConf << (S,Aquamarine) >> {
        + AwardLimitTime int32
        + AwardLimitValue int32
        + AwardCoeff float32

    }
    class AwardLevelInfo << (S,Aquamarine) >> {
        + Name string
        + Max int32
        + ArenaLimit []int32
        + GoodsMap <font color=blue>map</font>[int32]GoodInfo

    }
    class AwardPoolInfo << (S,Aquamarine) >> {
        + AwardPoolMap <font color=blue>map</font>[int32]AwardConf
        + AwardControl AwardControlConf
        + AvoidBase int32
        + AvoidRatio int32
        + IntervalSec int32
        + CheckSec int32
        + MinRecordValue int64
        + MinShare int64
        + ShareArenaId <font color=blue>map</font>[int32]int32
        + OperateSec ZoneNumber
        + FakePoolMap <font color=blue>map</font>[int32]*FakePoolConf
        + PoolSwitch []*PoolSwitchInfo
        + RankSwitch bool
        + SyncTime int32

        - checkValid() error

        + GetSharedPoolArenaId(arenaId int32) int32
        + VerifyPoolSwitch() bool
        + GetShare(arenaId int32, poolId int32, cost int32) int32
        + CheckRatio(arenaId int32, poolId int32, ratio int32) bool
        + AwardTrigger(arenaId int32, poolId int32, poolValue int32) int32
        + CheckAward(arenaId int32, poolId int32, poolVal int64, award int64) bool
        + GetAwardConf(arenaId int32, poolId int32) *AwardConfInfo
        + Reload(L *gopher-lua.LState) error

    }
    class AwardsInfo << (S,Aquamarine) >> {
        + Index int32
        + PropId int32
        + Percent int32

        + GetWeight() int

    }
    class BigFishIdxByFishListInfo << (S,Aquamarine) >> {
        + Min int32
        + Max int32
        + List []int32

    }
    class BigSmallBetInfo << (S,Aquamarine) >> {
        + Enable bool
        + Dices int32
        + Left int32
        + Right int32

    }
    class BlessAwardInfo << (S,Aquamarine) >> {
        + AwardNo string
        + BlessProbability []BlessProbabilityInfo

    }
    class BlessProbabilityInfo << (S,Aquamarine) >> {
        + Index int32
        + Ratio int32
        + Probability int32
        + Name string

        + GetWeight() int

    }
    class CenterFishListInfo << (S,Aquamarine) >> {
        + FishID []int32
        + ShapeType []int32
        + RouteIdx []int32
        + Speed float32
        + RouteType int32
        + SmallFish string
        + Ratio int32
        + Base int32

    }
    class ChargeConf << (S,Aquamarine) >> {
        + Enable bool
        + Ratio int32
        + Base int32
        + Times int32

    }
    class CreateFishListInfo << (S,Aquamarine) >> {
        + CenterFishListMap <font color=blue>map</font>[int32]*CenterFishListInfo
        + FishListMap <font color=blue>map</font>[int32]*FishListInfo
        + RouteListMap <font color=blue>map</font>[int32]*[]RouteListInfo

    }
    class DragonWheelConf << (S,Aquamarine) >> {
        + Num int32
        + Ratio int32
        + Probability int
        + IsSuper bool

        + GetWeight() int

    }
    class DragonWheelInfo << (S,Aquamarine) >> {
        + FinishSec int64
        + Config []DragonWheelConf
        + SuperAward []SuperAwardConf

    }
    class DropFishesInfo << (S,Aquamarine) >> {
        + DropItemID int32
        + DropTorpedoCfg []*DropTorpedoCfgInfo

    }
    class DropTorpedoCfgInfo << (S,Aquamarine) >> {
        + Index int32
        + FishScore ZoneNumber
        + Torpedoes []*TorpedoesInfo

    }
    class EelFishCaptureInfo << (S,Aquamarine) >> {
        + ShockFishID int32
        + Count int32
        + FishID []int32

    }
    class ExtraFishInfo << (S,Aquamarine) >> {
        + FishListMap <font color=blue>map</font>[int32]*CenterFishListInfo
        + RouteListMap <font color=blue>map</font>[int32]*[]RouteListInfo

    }
    class FTaskAllCfg << (S,Aquamarine) >> {
        + Enable bool
        + RewardLimit FTaskRewardLimit
        + ArenaLimit []int32
        + TaskLoop []FTaskLoopCfg

        - checkValid() error

        + Reload(L *gopher-lua.LState) error
        + IsOpen() bool
        + IsOpenArena() bool
        + GetFirstTask() (int64, int64, error)
        + GetLoopData(loopId int64) (FTaskLoopCfg, error)
        + GetTaskData(loopId int64, taskId int64) (FTaskCfg, error)
        + GetRewardLimitDate() []RewardCfg

    }
    class FTaskCfg << (S,Aquamarine) >> {
        + Id int64
        + Count int64
        + Ratio int32
        + Change int32
        + RewardList []RewardCfg

    }
    class FTaskLoopCfg << (S,Aquamarine) >> {
        + Id int64
        + Mode int32
        + TaskList []FTaskCfg

    }
    class FTaskRewardLimit << (S,Aquamarine) >> {
        + Claim []RewardCfg

    }
    class FakeDetailConf << (S,Aquamarine) >> {
        + Min int32
        + Max1 int32
        + Max2 int32
        + AddAmount ZoneNumber

    }
    class FakePoolConf << (S,Aquamarine) >> {
        + DetailMap <font color=blue>map</font>[int32]*FakeDetailConf

    }
    class FishConf << (S,Aquamarine) >> {
        + FishMap <font color=blue>map</font>[int32]*FishInfo

        - checkValid() error

        + GetFishValue(fishId int32) int32
        + Reload(L *gopher-lua.LState) error
        + IsBigFish(fishType int32) bool
        + GetFuncType(fishId int32) int32
        + GetChineseName(fishId int32) string
        + GetFishInfo(fishId int32) *FishInfo
        + GetFishName(fishType int32) string
        + CanDie(fishId int32) int32

    }
    class FishInfo << (S,Aquamarine) >> {
        + CFishName string
        + FishName string
        + FishPeiLv int32
        + FishType int32
        + FuncType int32
        + RandFishPeiLv ZoneNumber
        + FishAliveTime int64
        + CanNotDeadFlag int32
        + DropItemID int32
        + ArenaLimit []int32

        + CanCreate() bool

    }
    class FishListInfo << (S,Aquamarine) >> {
        + FishType []int32
        + Num int32
        + RouteIdx []int32
        + Speed float32
        + Ratio int32
        + Base int32

    }
    class FishStageConf << (S,Aquamarine) >> {
        + StageMap <font color=blue>map</font>[int32]*StageInfo
        + StageFishCtrlMap <font color=blue>map</font>[int32]*StageFishCtrlInfo

        - checkValid() error

        + Reload(L *gopher-lua.LState) error
        + GetStageLen() int32
        + GetFishCtrlInfo(stage int32, playerNum int32) *PlayersInfo
        + GetStageLiveTime(stage int32) int32

    }
    class FishValueZone << (S,Aquamarine) >> {
        + Left int32
        + Right int32

    }
    class FishValueZones << (S,Aquamarine) >> {
        + Zone FishValueZone
        + Value int32

    }
    class FormulaInfo << (S,Aquamarine) >> {
        + MinMulti float64
        + MaxMulti float64
        + RandTimes int32
        + EachMulti float64
        + Left float64
        + Right float64

        + GetAward(worth int32) int32

    }
    class FortuneConf << (S,Aquamarine) >> {
        + BackgroundSec int32
        + Config AtomicBombInfo
        + FishId []int32
        + ShowArenaID []int32

    }
    class FreeTimeDetail << (S,Aquamarine) >> {
        + Ratio int32
        + Base int32
        + Range ZoneNumber

    }
    class GameCommonConf << (S,Aquamarine) >> {
        + LoadFileTime int32
        + MaxHitMultiSize int32
        + MaxShootMultiSize int32
        + HeartBeatCheckSec int32
        + NonOperateSec int32
        + SaveDataSec int32
        + AdditionalDataSec int32
        + SceneNum int32
        + LogRatio int32
        + BulletReserveSec int32
        + DayLogPreFlushSec int32
        + FishCacheTimeSec int32
        + LogSizeLimit int32
        + FlushDBSec int32
        + TableMaxPlayer int32
        + BackgroundSec int32
        + UpdateToGSSec int32
        + UpdateToWorldSec int32
        + PreventCheatMin int64
        + BigMoneyMin int32
        + ReportPlayerNumSec int32
        + RoomMaxLimit int32
        + Address string
        + AndroidWareID string
        + IOSWareID string
        + AwardURL string
        + ChengTuoUseRatio int32
        + ChengTuoUseBase int32

    }
    class GameConf << (S,Aquamarine) >> {
        + GameCommon GameCommonConf
        + GunMap <font color=blue>map</font>[int32]GunLevelInfo
        + EnterLimitMap <font color=blue>map</font>[int32]int64
        + RoomUserLimitMap <font color=blue>map</font>[int32]int32
        + AvoidHurtMap <font color=blue>map</font>[int64][]AvoidHurtConf
        + VIPLimit VIPLimitInfo
        + RoomCustomMap <font color=blue>map</font>[int32]bool
        + ArenaPercentMap <font color=blue>map</font>[int32]float64

        - checkValid() error

        + Reload(L *gopher-lua.LState) error
        + TableMaxPlayer() int32
        + GetPercent(arenaId int32) float64
        + IsAvoidHurt(arenaId int32, agencyLevel int64) bool
        + GetUserLimit(arenaId int32) int32
        + FindGunInfo(arenaId int32, level int32) *GunInfo
        + GetGunBorder(arenaId int32) int32
        + IsRoomCustom(arenaId int32) bool
        + CheckRatio(ratio int32) bool
        + GetArenaGunInfo(arenaId int32) []GunInfo
        + GetTableIdMax(arenaId int32) int32
        + GetRoomUserMax(arenaId int32) int32
        + GetMedalLevel(vipLevel int32) int32
        + CanEnter(arenaId int32, money int64) bool

    }
    class GiftBagConf << (S,Aquamarine) >> {
        + ArenaID int32
        + FishID []int32

    }
    class GivenConf << (S,Aquamarine) >> {
        + ChengTuo *ChargeConf
        + NewComerPool *NewComerConf
        + OnlinePool *OnLineConf
        + PrintSec int32

        - checkValid() error

        + CanGiveNewGuys(arenaId int32, fishType int32) bool
        + CanGiveOnline(arenaId int32, fishType int32) bool
        + RandAwardSec() int32
        + GetOnlineAwardLimit() (int64, int64)
        + Reload(L *gopher-lua.LState) error

    }
    class GoodInfo << (S,Aquamarine) >> {
        + Index int32
        + PropId int32
        + Count int32
        + Name string
        + ImagePath string
        + Share int32

        + GetWeight() int

    }
    class GoodsInfo << (S,Aquamarine) >> {
        + Rank int32
        + ID int32
        + Amount int64
        + Number string
        + Name string
        + Notice string
        + Content string
        + Extra int32
        + ImagePath string

    }
    class GrpcClientConfig << (S,Aquamarine) >> {
        + Dial int
        + Timeout int
        + Subset int
        + Zone string
        + APPID string

    }
    class GunInfo << (S,Aquamarine) >> {
        + Level int32
        + MinRatio int32
        + MaxRatio int32
        + Step int32
        + Enable bool
        + Vip bool
        + VipLevel int32

    }
    class GunLevelInfo << (S,Aquamarine) >> {
        + LevelMap <font color=blue>map</font>[int32]GunInfo

    }
    class GunUnlockConf << (S,Aquamarine) >> {
        + Date string
        + SpecialTaskId int32
        + TaskConfMap <font color=blue>map</font>[int32]TaskInfo

        - checkValid() error

        + Reload(L *gopher-lua.LState) error
        + IsTaskExist(ratio int32) bool
        + GetRemainAward(taskIndex int32) int32
        + GetTaskInfo(taskIndex int32) *TaskInfo
        + GetStartTaskIndex() int32
        + GetEndTaskIndex() int32

    }
    class HallHttpConfig << (S,Aquamarine) >> {
        + Exchange *UnitInfo
        + GS *UnitInfo
        + Auth *UnitInfo

    }
    class HitInfo << (S,Aquamarine) >> {
        + Multiple int32
        + Percent int32

        + GetWeight() int

    }
    interface ILuaConfig  {
        + Reload( *gopher-lua.LState) error

    }
    class IngotsInfo << (S,Aquamarine) >> {
        + Index int32
        + Count int32
        + Probability int32

    }
    class JumpArenaConf << (S,Aquamarine) >> {
        + JumpArena []JumpConf
        + GiftBag GiftBagConf

        - checkValid() error

        + GetJumpConfig() (JumpConf, bool)
        + Reload(L *gopher-lua.LState) error

    }
    class JumpConf << (S,Aquamarine) >> {
        + ArenaID int32
        + Vip int32
        + Limit int32
        + GameTime int32
        + FishID []int32

    }
    class KindFishControlInfo << (S,Aquamarine) >> {
        + FishList []int32
        + Num int32

    }
    class LionConfInfo << (S,Aquamarine) >> {
        + Times int32
        + Ratio int32
        + Probability int32

        + GetWeight() int

    }
    class LuckProbability << (S,Aquamarine) >> {
        + GetProbability int32
        + Ratio int32

        + GetWeight() int

    }
    class LuckyCaptureInfo << (S,Aquamarine) >> {
        + DropItemID int32
        + Enable bool
        + Probability []LuckProbability

    }
    class LuckyTaskDetail << (S,Aquamarine) >> {
        + Type int32
        + Condition int32
        + Award int32
        + Text string

    }
    class LuckyTaskInfo << (S,Aquamarine) >> {
        + Enable bool
        + Consume int32
        + TaskConfMap <font color=blue>map</font>[int32]*LuckyTaskDetail

        - checkValid() error

        + Reload(L *gopher-lua.LState) error
        + GetTaskType(taskId int32) int32
        + GetTaskConfDetail(taskId int32) *LuckyTaskDetail
        + GetRecordKeyAndLen(recordType int32, playerId int64) (string, int64)

    }
    class MatchConf << (S,Aquamarine) >> {
        + IsOpen bool
        + MatchSec int32
        + ReportSec int32
        + VipBonus []*VipBonusConf
        + PackBonus []*PackBonusConf

        - checkValid() error

        + GetScoreBonus(matchType int32, vipLevel int32, packId []string) float32
        + GetRewardBonus(matchType int32, vipLevel int32, packId []string) (float32, int32)
        + GetCardBonus(matchType int32, packId []string) int64
        + IsBonusPack(id string, matchArenaId int32) bool
        + CheckMatchType(matchType int32, checker []int32) bool
        + Reload(L *gopher-lua.LState) error

    }
    class MedalLevelInfo << (S,Aquamarine) >> {
        + Level int32
        + Name string
        + VipZone ZoneNumber

    }
    class MedalZoneInfo << (S,Aquamarine) >> {
        + Index int32
        + ZoneLeft int32
        + ZoneRight int32
        + Value int32
        + Name string

    }
    class MinMultiShareInfo << (S,Aquamarine) >> {
        + GameID int32
        + Multiple int32

    }
    class MsgConf << (S,Aquamarine) >> {
        + AwardPoolNameMap <font color=blue>map</font>[int32]string
        + ArenaNameMap <font color=blue>map</font>[int32]string
        + Messages <font color=blue>map</font>[int32]string
        + LogTypeName <font color=blue>map</font>[int32]string

        - checkValid() error

        + GetPoolName(key int32) string
        + GetArenaName(key int32) string
        + GetMsg(errCode int32) string
        + GetMoneySysName(num int32) string
        + Reload(L *gopher-lua.LState) error

    }
    class NewComerConf << (S,Aquamarine) >> {
        + Enable bool
        + Money int64
        + ArenaID int32
        + FishID []int32
        + Ratio int32
        + Base int32
        + Date string

    }
    class NewYearCardInfo << (S,Aquamarine) >> {
        + Enable bool
        + MaxBuyCount int32
        + CardValue int32
        + AvoidHurt AvoidHurtInfo
        + VipLimit int32
        + MinMultiShare []*MinMultiShareInfo
        + AwardCalc AwardCalcInfo
        + Probability []ProbabilityInfo
        + BlessAward BlessAwardInfo

        + GetBlessMultiple(key string) int32
        + GetProbabilityConf() *ProbabilityInfo
        + GetNewYearCardShare(gameID int32) int32

    }
    class NumRangeInfo << (S,Aquamarine) >> {
        + Min int32
        + Max int32

    }
    class OnLineConf << (S,Aquamarine) >> {
        + Enable bool
        + Money int64
        + ArenaID int32
        + FishID []int32
        + Ratio int32
        + Base int32
        + AwardTime ZoneNumber
        + DayLimit int64
        + TotalLimit int64

    }
    class PackBonusConf << (S,Aquamarine) >> {
        + Id string
        + MatchType []int32
        + LimitBuy bool
        + Score float32
        + Reward float32
        + Card int32
        + Save int32

    }
    class ParticularInfo << (S,Aquamarine) >> {
        + NewYearCard NewYearCardInfo
        + TridentSys TridentSysInfo

        - checkValid() error

        + GetSubItemVip(subItemId int32) int32
        + BigSmallAvoidHurt(agentLevel int32) bool
        + GetTridentBets(score int64) []int32
        + Reload(L *gopher-lua.LState) error

    }
    class PathConf << (S,Aquamarine) >> {
        + CoordsMap <font color=blue>map</font>[string]*[]SmallFishInfo

        - checkValid() error

        + Reload(L *gopher-lua.LState) error

    }
    class PlayersInfo << (S,Aquamarine) >> {
        + FishMin int32
        + FishMax int32
        + BigFishMin int32
        + BigFishMax int32

    }
    class PoolSwitchInfo << (S,Aquamarine) >> {
        + ArenaID int
        + IsOpen bool
        + RoomName string

    }
    class PoseidonConf << (S,Aquamarine) >> {
        + StagesMap <font color=blue>map</font>[int32]*ScoresInfo
        + Awards []AwardsInfo
        + SuperTrident SuperTridentInfo

        - checkValid() error

        + GetScore(stage int32, subStage int32) int32
        + GetSubStageSize(stage int32) int
        + DrawAward() (int32, bool)
        + GetCritMulti(index int32) int32
        + GetFishPriority(fishType int32) bool
        + Reload(L *gopher-lua.LState) error

    }
    class ProbabilityInfo << (S,Aquamarine) >> {
        + AwardNo string
        + Probability int32
        + Name string
        + Zone ZoneNumber

        + GetWeight() int

    }
    class PropInfo << (S,Aquamarine) >> {
        + ID int32
        + Name string
        + Worth int32

    }
    class PropParamInfo << (S,Aquamarine) >> {
        + PropId int32
        + Enable bool
        + Worth int32
        + ItemId string

    }
    class PropTblInfo << (S,Aquamarine) >> {
        + PropId int32
        + Limit int32

    }
    class PropsConfig << (S,Aquamarine) >> {
        + Props []PropInfo
        + PropParam []PropParamInfo
        + PropTbl []PropTblInfo

        - checkValid() error

        + GetPropVipLimit(propId int32) int32
        + GetTorpedoWorth(propid int32) int32
        + GetPropWorth(propid int32) int32
        + GetPropName(propId int32) string
        + GetPropEnable(id int32) bool
        + GetItemId(propId int32) string
        + GetPropId(itemId string) int32
        + Set(text string) error
        + Reload(L *gopher-lua.LState) error

    }
    class RedisAttributeConf << (S,Aquamarine) >> {
        + Addr string
        + Pwd string

    }
    class RedisConf << (S,Aquamarine) >> {
        + Temporary *RedisAttributeConf
        + GameRedis *RedisAttributeConf

    }
    class RedisConfig << (S,Aquamarine) >> {
        + Addr string
        + Pwd string

    }
    class RewardCfg << (S,Aquamarine) >> {
        + Id int32
        + Count int64

    }
    class RouteListInfo << (S,Aquamarine) >> {
        + X []float32
        + Y []float32
        + Z []float32
        + Wait float32

        + GetCoordinate() float32

    }
    class ScoresInfo << (S,Aquamarine) >> {
        + Scores []int32
        + CritMulti []int32

    }
    class ScreenLimitConf << (S,Aquamarine) >> {
        + KindFishControlMap <font color=blue>map</font>[int32]*KindFishControlInfo
        + FishCantGetFree []int32
        + CreateFishTimeLimit <font color=blue>map</font>[int32]int64

        - checkValid() error

        + FilterFreeTimeFish(fishId int32) bool
        + GetCreateLimit(fishId int32) int64
        + Reload(L *gopher-lua.LState) error

    }
    class ServerConfig << (S,Aquamarine) >> {
        + GameID int
        + ArenaID int
        + ServerID int
        + Version int
        + ConfCenterOn bool
        + Address string
        + FixedAddress string
        + HttpAddress string
        + GameConfPath string

        + GetID() (int32, int32, int32)
        + GetHttpAddress() string
        + IsMyRoom(gameID int, arenaID int, serverID int) bool

    }
    class SkillEnableInfo << (S,Aquamarine) >> {
        + ArenaId int32
        + SkillIds []int32

    }
    class SmallFishInfo << (S,Aquamarine) >> {
        + X []float32
        + Y []float32
        + Z []float32
        + Time float32
        + FishID int32

        + GetSmallCoordinate() (float32, float32, float32)

    }
    class SpecialFishConf << (S,Aquamarine) >> {
        + TorpedoFish *TorpedoFishInfo
        + EelFishCapture *EelFishCaptureInfo
        + LionFish []LionConfInfo
        + LuckyCapture *LuckyCaptureInfo
        + DragonWheel *DragonWheelInfo

        - checkValid() error

        + GetLuckRatio() int32
        + GetShockConf(fishId int32) *EelFishCaptureInfo
        + CanShock(fishId int32) bool
        + GetLionRatio() int32
        + GetDragonWheelRatio() (int32, bool)
        + GetSuperAward() int32
        + Reload(L *gopher-lua.LState) error

    }
    class SpecialGunConf << (S,Aquamarine) >> {
        + FreeTime <font color=blue>map</font>[int32]*FreeTimeDetail
        + AtomicBomb AtomicBombConf
        + Fortune FortuneConf

        - checkValid() error

        + GetMultiple(roundId int32) int32
        + GetFortuneMultiple(roundId int32) int32
        + CheckFortuneFish(fishId int32) bool
        + CheckIngotShow() bool
        + Reload(L *gopher-lua.LState) error

    }
    class StageFishCtrlInfo << (S,Aquamarine) >> {
        + PlayersMap <font color=blue>map</font>[int32]*PlayersInfo

    }
    class StageInfo << (S,Aquamarine) >> {
        + LiveTime int32
        + CreateFishTime int32
        + CreateFishBeginTime int32
        + CreateFishListRandIdx int32
        + CreateCenterFishListNum int32
        + IsPlayChaoXi bool
        + IsAccelerateFlag bool
        + NumRange NumRangeInfo
        + BigFishIdxByFishList BigFishIdxByFishListInfo
        + CreateFishListMap <font color=blue>map</font>[int32]*CreateFishListInfo
        + ExtraFish *CreateFishListInfo

    }
    class StageMapInfo << (S,Aquamarine) >> {
        + StageMap <font color=blue>map</font>[int32]*StageInfo

    }
    class SubItemInfo << (S,Aquamarine) >> {
        + ItemId int32
        + Vip int32
        + Amount int32

    }
    class SuperAwardConf << (S,Aquamarine) >> {
        + Ratio int32
        + Probability int

        + GetWeight() int

    }
    class SuperTridentInfo << (S,Aquamarine) >> {
        + SingleShockMax int32
        + KeepSec int32
        + Fishes []int32

    }
    class TaskInfo << (S,Aquamarine) >> {
        + ArenaID int32
        + Level int32
        + Ratio int32
        + VipLevel int32
        + Num int32
        + Award int32
        + Ticket int32

    }
    class TipsConf << (S,Aquamarine) >> {
        + TipsMap <font color=blue>map</font>[int32]*TipsInfo
        + FishValue []*FishValueZones

        - checkValid() error

        + Reload(L *gopher-lua.LState) error
        + GetChangeBroadcastId(fishValue int32) int32

    }
    class TipsInfo << (S,Aquamarine) >> {
        + GunRatio int32
        + PointScore int32
        + TipValue string
        + Priority int32
        + Delay int32
        + FishValue int32

    }
    class TorpedoFishInfo << (S,Aquamarine) >> {
        + AwardCalc AwardCalcInfo
        + DropFishes DropFishesInfo

    }
    class TorpedoInfo << (S,Aquamarine) >> {
        + HigherTorpedo []int32

    }
    class TorpedoesInfo << (S,Aquamarine) >> {
        + TorpedoID int32
        + DropNum int32
        + DropProbability AvoidHurtInfo

    }
    class TridentBetsInfo << (S,Aquamarine) >> {
        + Index int32
        + ScoreRange ZoneNumber
        + Base int32
        + Bets []int32

    }
    class TridentDetailInfo << (S,Aquamarine) >> {
        + ArenaID int
        + TridentBets []*TridentBetsInfo

    }
    class TridentSysInfo << (S,Aquamarine) >> {
        + Enable bool
        + SingleFullScore int32
        + Total int32
        + AwardCalc []*AwardCalcInfo
        + BigSmallBet BigSmallBetInfo
        + AvoidHurtMap <font color=blue>map</font>[int32]*AvoidHurtInfo
        + BigSmallBetTimes int32
        + WinRankPollSec int64
        + RankEnable bool
        + ContinueFailure int32
        + MinTridentBet int32
        + Goods []*GoodsInfo
        + TridentDetail []*TridentDetailInfo
        + SubItem []*SubItemInfo
        + GivenAmount int32

    }
    class UnitInfo << (S,Aquamarine) >> {
        + URL string

    }
    class UserPoolConf << (S,Aquamarine) >> {
        + Enable bool
        + PoolMax int32
        + FishEarnPercent float64
        + ClientLimitMap <font color=blue>map</font>[int32]int32
        + Torpedo TorpedoInfo
        + AwardLevelMap <font color=blue>map</font>[int32]*AwardLevelInfo
        + FirstLevelMax int32

        - checkValid() error

        + Reload(L *gopher-lua.LState) error
        + IsHighTorpedo(propId int32) bool
        + GetLevelName(levelId int32) string
        + GetFirstLevelMax() int32
        + GetPoolMax() int32
        + CheckLevelId(levelId int32) bool
        + GetLevelMax(levelId int32) int32
        + IsMatchedLevel(arenaId int32, levelId int32, amount int64) bool
        + GetMatchedLevel(arenaId int32, amount int64) int32
        + AwardShare(earn int64) int64
        + GetLevelInfo(levelId int32) *AwardLevelInfo

    }
    class VIPLimitInfo << (S,Aquamarine) >> {
        + PermanentVIPDays int32
        + VipGunLimit int32
        + PandaGunLimit int32
        + MedalLevel []*MedalLevelInfo

    }
    class VipBonusConf << (S,Aquamarine) >> {
        + Id int32
        + Left int32
        + Right int32
        + MatchType []int32
        + Score float32
        + Reward float32

    }
    class WheelItemCoefficient << (S,Aquamarine) >> {
        + Weight int32
        + CoeffRatio ZoneNumber

        + GetWeight() int

    }
    class WheelItemMultiple << (S,Aquamarine) >> {
        + Weight int32
        + Multiple int32

        + GetWeight() int

    }
    class ZoneConf << (S,Aquamarine) >> {
        + Index int32
        + Zone ZoneNumber
        + Value int32

    }
    class ZoneNumber << (S,Aquamarine) >> {
        + Left int32
        + Right int32

    }
    class config.LoginType << (T, #FF7700) >>  {
    }
    class grpcClientConfig << (S,Aquamarine) >> {
        + RoomCenterConfig *GrpcClientConfig
        + StatConfig *GrpcClientConfig
        + MatchConfig *GrpcClientConfig
        + LuckyDrawConfig *GrpcClientConfig

    }
    class luaLoader << (S,Aquamarine) >> {
        + Set(s string) error

    }
    class luaModule << (S,Aquamarine) >> {
        - name string

        + Set(s string) error

    }
}

"config.ILuaConfig" <|-- "config.AwardPoolInfo"
"base.IWheelItem" <|-- "config.AwardsInfo"
"base.IWheelItem" <|-- "config.BlessProbabilityInfo"
"base.IWheelItem" <|-- "config.DragonWheelConf"
"config.ILuaConfig" <|-- "config.FTaskAllCfg"
"config.ILuaConfig" <|-- "config.FishConf"
"config.ILuaConfig" <|-- "config.FishStageConf"
"config.ILuaConfig" <|-- "config.GameConf"
"config.ILuaConfig" <|-- "config.GivenConf"
"base.IWheelItem" <|-- "config.GoodInfo"
"config.ILuaConfig" <|-- "config.GunUnlockConf"
"base.IWheelItem" <|-- "config.HitInfo"
"config.ILuaConfig" <|-- "config.JumpArenaConf"
"base.IWheelItem" <|-- "config.LionConfInfo"
"base.IWheelItem" <|-- "config.LuckProbability"
"config.ILuaConfig" <|-- "config.LuckyTaskInfo"
"config.ILuaConfig" <|-- "config.MatchConf"
"config.ILuaConfig" <|-- "config.MsgConf"
"config.ILuaConfig" <|-- "config.ParticularInfo"
"config.ILuaConfig" <|-- "config.PathConf"
"config.ILuaConfig" <|-- "config.PoseidonConf"
"base.IWheelItem" <|-- "config.ProbabilityInfo"
"config.ILuaConfig" <|-- "config.PropsConfig"
"config.ILuaConfig" <|-- "config.ScreenLimitConf"
"config.ILuaConfig" <|-- "config.SpecialFishConf"
"config.ILuaConfig" <|-- "config.SpecialGunConf"
"base.IWheelItem" <|-- "config.SuperAwardConf"
"config.ILuaConfig" <|-- "config.TipsConf"
"config.ILuaConfig" <|-- "config.UserPoolConf"
"base.IWheelItem" <|-- "config.WheelItemCoefficient"
"base.IWheelItem" <|-- "config.WheelItemMultiple"

namespace dao {
    interface Dao  {
        + Close() 
        + Ping(ctx "context.Context) error

    }
    class dao << (S,Aquamarine) >> {
        - redis *redis.Redis
        - cache *fanout.Fanout

        + Close() 
        + Ping(ctx "context.Context) error
        + PingRedis(ctx "context.Context) error

    }
}

"dao.Dao" <|-- "dao.dao"

namespace datastructure {
    class RobotConf << (S,Aquamarine) >> {
        + GameId int32
        + PID int64
        + Money int64
        + Ratio int32
        + SpawnNum int32
        + RobotType string
        + Times int64
        + PropId int32

    }
    class datastructure.Pusher << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(string, api.GameCommand, proto.Message) " as fontcolorbluefuncfontstringapiGameCommandprotoMessage {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


namespace di {
    class App << (S,Aquamarine) >> {
        - svc *service.Service
        - http *blademaster.Engine
        - tcp *comet.Server

    }
}


namespace drawmgr {
    class DrawMgr << (S,Aquamarine) >> {
        - tick []*TickDetail
        - lock sync.Mutex

        - polling() 

        + Start() 
        + CheckTime(curTick int64) bool

    }
    class TickDetail << (S,Aquamarine) >> {
        - begin int64
        - end int64

    }
}

"global.IDraw" <|-- "drawmgr.DrawMgr"

namespace event {
    class AwardPoolRewardEvent << (S,Aquamarine) >> {
        + PID int64
        + Ratio int32
        + AwardPoolType int32
        + PoolId int32
        + Award int32

        + GetEventType() EventType

    }
    class BigSmallBet << (S,Aquamarine) >> {
        + PID int64
        + Bet int64
        + Award int64

        + GetEventType() EventType

    }
    class BigSmallRecordEvent << (S,Aquamarine) >> {
        + PID int64
        + Dices []int32
        + Date string

        + GetEventType() EventType

    }
    class BulletCostEvent << (S,Aquamarine) >> {
        + PID int64
        + SysId int32
        + Ratio int32
        + CostValue int64
        + CostMoney int32
        + MonsterId int32

        + GetEventType() EventType

    }
    class BulletEarnEvent << (S,Aquamarine) >> {
        + PID int64
        + Nickname string
        + Ratio int32
        + BulletType int32
        + Earn int64
        + EarnMoney int32
        + MonsterId int32
        + MonsterValue int32
        + SysId int32

        + GetEventType() EventType

    }
    class BuyNewYearCard << (S,Aquamarine) >> {
        + PID int64
        + Count int32
        + Cost int64

        + GetEventType() EventType

    }
    class BuyNewYearEvent << (S,Aquamarine) >> {
        + PID int64
        + Buy int32
        + Time string

        + GetEventType() EventType

    }
    class ChengTuoGiven << (S,Aquamarine) >> {
        + PID int64
        + Consume int32
        + Ratio int32
        + Money int64

        + GetEventType() EventType

    }
    class ClientTraceLog << (S,Aquamarine) >> {
        + PID int64
        + Money int64
        + LogType int32
        + ClientScore string
        + Content string
        + Time string

        + GetEventType() EventType

    }
    class CloseServerEvent << (S,Aquamarine) >> {
        + GetEventType() EventType

    }
    class DropCardEvent << (S,Aquamarine) >> {
        + PID int64
        + CardID int32
        + DropTime int64
        + TotalLoss int64
        + CardValue int32
        + VipLevel int32

        + GetEventType() EventType

    }
    class DropCardTriggerEvent << (S,Aquamarine) >> {
        + PID int64
        + LossValue int32
        + VipLevel int32

        + GetEventType() EventType

    }
    class EventHandler << (S,Aquamarine) >> {
        + Start() 

    }
    class ExtraSnapshoot << (S,Aquamarine) >> {
        + PID int64
        + Extra string

        + GetEventType() EventType

    }
    class FragmentTaskEvent << (S,Aquamarine) >> {
        + PID int64
        + TimeStr string
        + LoopId int64
        + TaskId int64
        + Reward <font color=blue>map</font>[int32]int64

        + GetEventType() EventType

    }
    class FreeTimeReturn << (S,Aquamarine) >> {
        + PID int64
        + Ratio int32
        + SysId int32
        + RetScore int64

        + GetEventType() EventType

    }
    class GiftBagAward << (S,Aquamarine) >> {
        + PID int64
        + Score int64

        + GetEventType() EventType

    }
    class GunTaskAward << (S,Aquamarine) >> {
        + PID int64
        + Score int64
        + Ticket int32

        + GetEventType() EventType

    }
    interface IEvent  {
        + GetEventType() EventType

    }
    class KickUserEvent << (S,Aquamarine) >> {
        + PID int64
        + ChairId int32
        + Remark string

        + GetEventType() EventType

    }
    class LogBulletTaxEvent << (S,Aquamarine) >> {
        + PID int64
        + BulletType int32
        + Ratio int32
        + CostValue float64
        + HitMonsterId int32

    }
    class MoneySnapshoot << (S,Aquamarine) >> {
        + PID int64
        + Time string
        + Money int64
        + Value int64
        + Remark string

        + GetEventType() EventType

    }
    class NewComerGiven << (S,Aquamarine) >> {
        + PID int64
        + Ratio int32
        + Money int64

        + GetEventType() EventType

    }
    class NewYearCardRecordEvent << (S,Aquamarine) >> {
        + PID int64
        + Comb int32
        + Bless int32
        + Date string

        + GetEventType() EventType

    }
    class OnlineGiven << (S,Aquamarine) >> {
        + PID int64
        + Ratio int32
        + Money int64

        + GetEventType() EventType

    }
    class ServerTraceLog << (S,Aquamarine) >> {
        + PID int64
        + Data string

        + GetEventType() EventType

    }
    class ServerUpdateEvent << (S,Aquamarine) >> {
    }
    class TridentBet << (S,Aquamarine) >> {
        + PID int64
        + Bet int64
        + Award int64

        + GetEventType() EventType

    }
    class UseCard << (S,Aquamarine) >> {
        + CardID int32
        + Base int32
        + Multiple int32
        + CardValue int32
        + GetMoney int32

    }
    class UseCardEvent << (S,Aquamarine) >> {
        + PID int64
        + UseCardList []UseCard
        + UseTime int64
        + VipLevel int32

        + GetEventType() EventType

    }
    class UseNewYearCard << (S,Aquamarine) >> {
        + Base int32
        + Multiple int32
        + CardValue int32
        + GetMoney int32

    }
    class UseNewYearCardEvent << (S,Aquamarine) >> {
        + PID int64
        + UseCardList []UseNewYearCard

        + GetEventType() EventType

    }
    class UseTorpedoEvent << (S,Aquamarine) >> {
        + PID int64
        + PropValue int32
        + Award int32
        + PropId int32
        + Num int32
        + Time string

        + GetEventType() EventType

    }
    class UserLogin << (S,Aquamarine) >> {
        + PID int64
        + Money int64
        + Value int64
        + Extra string
        + Time string

        + GetEventType() EventType

    }
    class UserLogout << (S,Aquamarine) >> {
        + PID int64

        + GetEventType() EventType

    }
    class UserNewYearEvent << (S,Aquamarine) >> {
        + PID int64
        + Use int32
        + Award int32
        + Time string

        + GetEventType() EventType

    }
    class UserPoolAdd << (S,Aquamarine) >> {
        + PID int64
        + Ratio int32
        + Money int64

        + GetEventType() EventType

    }
    class UserPoolDrawEvent << (S,Aquamarine) >> {
        + PID int64
        + BeforeValue int64
        + AfterValue int64
        + Level int32
        + EarnMoney int32
        + RewardValue int64
        + PropId int32
        + Num int32
        + Time string
        + Name string

        + GetEventType() EventType

    }
    class UserPoolLeaveEvent << (S,Aquamarine) >> {
        + PID int64
        + EnterTime string
        + EnterValue int64
        + Value int64
        + Time string

        + GetEventType() EventType

    }
    class UserTridentEvent << (S,Aquamarine) >> {
        + PID int64
        + MillionBetCount int32
        + LessMillionBetCount int32
        + BigSmallCount int32
        + WinExitCount int32
        + GuaranteedCount int32

        + GetEventType() EventType

    }
    class WinRankAward << (S,Aquamarine) >> {
        + PID int64
        + Award int64

        + GetEventType() EventType

    }
    class event.EventType << (T, #FF7700) >>  {
    }
    class event.IEventListener << (T, #FF7700) >>  {
    }
}

"event.IEvent" <|-- "event.AwardPoolRewardEvent"
"event.IEvent" <|-- "event.BigSmallBet"
"event.IEvent" <|-- "event.BigSmallRecordEvent"
"event.IEvent" <|-- "event.BulletCostEvent"
"event.IEvent" <|-- "event.BulletEarnEvent"
"event.IEvent" <|-- "event.BuyNewYearCard"
"event.IEvent" <|-- "event.BuyNewYearEvent"
"event.IEvent" <|-- "event.ChengTuoGiven"
"event.IEvent" <|-- "event.ClientTraceLog"
"event.IEvent" <|-- "event.CloseServerEvent"
"event.IEvent" <|-- "event.DropCardEvent"
"event.IEvent" <|-- "event.DropCardTriggerEvent"
"event.IEvent" <|-- "event.ExtraSnapshoot"
"event.IEvent" <|-- "event.FragmentTaskEvent"
"event.IEvent" <|-- "event.FreeTimeReturn"
"event.IEvent" <|-- "event.GiftBagAward"
"event.IEvent" <|-- "event.GunTaskAward"
"event.IEvent" <|-- "event.KickUserEvent"
"event.IEvent" <|-- "event.MoneySnapshoot"
"event.IEvent" <|-- "event.NewComerGiven"
"event.IEvent" <|-- "event.NewYearCardRecordEvent"
"event.IEvent" <|-- "event.OnlineGiven"
"event.IEvent" <|-- "event.ServerTraceLog"
"event.IEvent" <|-- "event.TridentBet"
"event.IEvent" <|-- "event.UseCardEvent"
"event.IEvent" <|-- "event.UseNewYearCardEvent"
"event.IEvent" <|-- "event.UseTorpedoEvent"
"event.IEvent" <|-- "event.UserLogin"
"event.IEvent" <|-- "event.UserLogout"
"event.IEvent" <|-- "event.UserNewYearEvent"
"event.IEvent" <|-- "event.UserPoolAdd"
"event.IEvent" <|-- "event.UserPoolDrawEvent"
"event.IEvent" <|-- "event.UserPoolLeaveEvent"
"event.IEvent" <|-- "event.UserTridentEvent"
"event.IEvent" <|-- "event.WinRankAward"

namespace global {
    class GivenAwardMgr << (S,Aquamarine) >> {
        - newGuysAwardPool int64
        - onlineAwardPool int64
        - curTime int64
        - lock sync.Mutex

        - init() 
        - polling() 
        - diffDayCheck() 

        + Start() 
        + CanGiveNewGuys(fishType int32, score int64) bool
        + CanGiveOnline(fishType int32, score int64) bool
        + CacheNewGuysPool(delta int64) int64
        + CacheOnlinePool(delta int64) int64
        + GetOnlineAwardPool() int64
        + GetNewGuysAwardPool() int64

    }
    interface IAwardPool  {
        + Start(gameId int32, arenaId int32) 
        + AvoidHurt(cost int64) bool
        + UpdatePoolToClient(mid string) 
        + ChangeFakePool() 

    }
    interface IDraw  {
        + CheckTime( int64) bool
        + Start() 

    }
    interface IMatch  {
        + Start() 
        + GetMatchByMatchId( int32) *matchv1.TargetMatchDetail
        + GetMatches() []*matchv1.TargetMatchDetail
        + UpdateBonus(matchId int32, timeId int32, typeId int32, playerId int64, bonus float32) 
        + UpdateMatchData(matchId int32, pid int64, score int64, pay int64) bool
        + GetMatchByArenaId(arenaId int32) *matchv1.TargetMatchDetail

    }
    interface IPlayerManager  {
    }
}


namespace logCache {
    class loggerCacher << (S,Aquamarine) >> {
        - logger *log.Logger
        - totalSize int
        - filePath string
        - loggType int32

    }
}


namespace logger {
    class StatUserItem << (S,Aquamarine) >> {
        + TotalUser <font color=blue>map</font>[int32]<font color=blue>map</font>[int64]bool
        + CountUser <font color=blue>map</font>[int32]<font color=blue>map</font>[int64]bool

        + AddTotal(itemId int32, pid int64) 
        + AddCount(itemId int32, pid int64) 
        + Add(item *StatUserItem) 
        + Format() string

    }
    class UserActionRecorder << (S,Aquamarine) >> {
        - lock sync.Mutex
        - dayTimestamp int64

        + DayStat *StatUserItem
        + TotalStat *StatUserItem

        - onTimer() 

        + UserAction(itemId int32, pid int64, isCount bool) 

    }
    class bigEarnRecord << (S,Aquamarine) >> {
        + GameId int32
        + ArenaId int32
        + ServerId int32
        + PID int64
        + Nickname string
        + SysId int32
        + SysName string
        + Earn int64
        + Remark int32
        + Time string

    }
    class monetStatItem << (S,Aquamarine) >> {
        + Cost int64
        + Earn int64

    }
    class moneyBalance << (S,Aquamarine) >> {
        - lock sync.Mutex
        - timerMoneyStat *moneyStat
        - totalMoneyStat *moneyStat
        - userLogMgr *userLogManager

        - onTimer() 
        - onUserLogin(iEvent event.IEvent) 
        - onBulletCost(iEvent event.IEvent) 
        - onBulletEarn(iEvent event.IEvent) 
        - onDropCard(iEvent event.IEvent) 
        - onUseCard(iEvent event.IEvent) 
        - onUserPoolDraw(iEvent event.IEvent) 
        - onUseTorpedo(iEvent event.IEvent) 
        - onAwardPoolReward(iEvent event.IEvent) 
        - onUserPoolAdd(iEvent event.IEvent) 
        - onNewComerGiven(iEvent event.IEvent) 
        - onOnlineGiven(iEvent event.IEvent) 
        - onChengTuoGiven(iEvent event.IEvent) 
        - onMoneySnapshoot(iEvent event.IEvent) 
        - onExtraSnapshoot(iEvent event.IEvent) 
        - onUserLogout(iEvent event.IEvent) 
        - onClientTraceLog(iEvent event.IEvent) 
        - onServerTraceLog(iEvent event.IEvent) 
        - onTridentBet(iEvent event.IEvent) 
        - onBigSmallBet(iEvent event.IEvent) 
        - onBuyNewYearCard(iEvent event.IEvent) 
        - onUseNewYearCard(iEvent event.IEvent) 
        - onWinRankAward(iEvent event.IEvent) 
        - onFreeTimeRet(iEvent event.IEvent) 
        - onGiftBagAward(iEvent event.IEvent) 
        - onGunTask(iEvent event.IEvent) 
        - onFragmentTaskStat(iEvent event.IEvent) 

        + OnEvent(e event.IEvent) 
        + GetIdentifier() string

    }
    class moneyStat << (S,Aquamarine) >> {
        + RatioMap <font color=blue>map</font>[int32]*moneySysStat

        - addMultiStat(ratio int32, sysId int32, baseSysId int32, cost int64, earn int64) 
        - addStat(ratio int32, statType int32, cost int64, earn int64) 
        - add(stat *moneyStat) 
        - getSummary() <font color=blue>map</font>[int32]*monetStatItem
        - sendWebStat() 

        + MoneyStatFmt() string

    }
    class moneySysStat << (S,Aquamarine) >> {
        + StatMap <font color=blue>map</font>[int32]*monetStatItem

        - addStat(statType int32, cost int64, earn int64) 

    }
    class monsterBalance << (S,Aquamarine) >> {
        - lock sync.Mutex
        - timerMonsterStat *monsterStat
        - totalMonsterStat *monsterStat

        - onTimer() 
        - onBulletCost(iEvent event.IEvent) 
        - onBulletEarn(iEvent event.IEvent) 

        + OnEvent(e event.IEvent) 
        + GetIdentifier() string

    }
    class monsterStat << (S,Aquamarine) >> {
        + MonsterStatMap <font color=blue>map</font>[int32]*monsterStatItem
        + TotalCost int64
        + TotalEarn int64
        + TotalCostMoney int64
        + TotalEarnMoney int64

        - add(stat *monsterStat) 
        - addStat(monsterId int32, item *monsterStatItem) 
        - onBulletCost(e *event.BulletCostEvent) 
        - onBulletEarn(e *event.BulletEarnEvent) 
        - getStatItem(monsterID int32) *monsterStatItem
        - sendWebStat() 

        + MonsterStatFmt() string

    }
    class monsterStatItem << (S,Aquamarine) >> {
        + Cost int64
        + Earn int64
        + EarnMoney int64
        + Capture int64
        + Hit int64
        + Tax int64
        + Give int64

        - addStat(item *monsterStatItem) 

    }
    class uerMoneyLog << (S,Aquamarine) >> {
        + InitMoney int64
        + CostMoney int64
        + EarnMoney int64
        + MaxMoney int64
        + MaxMoneyTime string
        + MaxEarnDetail string
        + InitValue int64
        + CostValue int64
        + EarnValue int64
        + MaxValue int64
        + MaxValueTime string
        + Snapshots []string

        - updateBestMoney(costMoney int64, earnMoney int64, costValue int64, earnValue int64) 
        - getMoney() int64
        - getValue() int64

    }
    class userLog << (S,Aquamarine) >> {
        - moneyStat *moneyStat
        - monsterStat *monsterStat

        + PlayerId int64
        + MoneyLog *uerMoneyLog
        + Extra []string
        + Traces []string
        + MoneyDetailFmt string
        + MoneySumFmt string
        + MonsterFmt string
        + FragmentStat []string

    }
    class userLogManager << (S,Aquamarine) >> {
        - userLogMap <font color=blue>map</font>[int64]*userLog

        - getAndSetUserLog(pid int64) *userLog
        - getUserLog(pid int64) *userLog
        - delUserLog(pid int64) 
        - onLogin(e *event.UserLogin) 
        - onMoneySnapshoot(e *event.MoneySnapshoot) 
        - onMoneyStat(pid int64, ratio int32, sysId int32, cost int64, earn int64) 
        - onMoneyMultiStat(pid int64, ratio int32, sysId int32, baseSysId int32, costMoney int32, earnMoney int32, cost int64, earn int64) 
        - onBulletCost(e *event.BulletCostEvent, sysId int32, baseSysId int32, cost int64, earn int64) 
        - onBulletEarn(e *event.BulletEarnEvent, sysId int32, baseSysId int32, cost int64, earn int64) 
        - onClientTraceLog(e *event.ClientTraceLog) 
        - onExtraSnapshoot(e *event.ExtraSnapshoot) 
        - onServerTraceLog(e *event.ServerTraceLog) 
        - onLogout(e *event.UserLogout) 
        - onFragmentTaskStat(e *event.FragmentTaskEvent) 

    }
}


namespace matchmgr {
    class MatchMgr << (S,Aquamarine) >> {
        - matchList []*matchv1.TargetMatchDetail
        - lastLoadTick int64
        - lock sync.Mutex

        - polling() 
        - updateList(match []*matchv1.TargetMatchDetail) 

        + Start() 
        + GetMatches() []*matchv1.TargetMatchDetail
        + LoadMatchDetail() []*matchv1.TargetMatchDetail
        + CheckStatus(match []*matchv1.TargetMatchDetail) 
        + GetMatchByMatchId(matchId int32) *matchv1.TargetMatchDetail
        + GetMatchByArenaId(arenaId int32) *matchv1.TargetMatchDetail
        + UpdateMatchData(matchId int32, pid int64, score int64, pay int64) bool
        + UpdateBonus(matchId int32, timeId int32, typeId int32, playerId int64, bonus float32) 

    }
}

"global.IMatch" <|-- "matchmgr.MatchMgr"

namespace model {
    class Kratos << (S,Aquamarine) >> {
        + Hello string

    }
    class LatelyLuckyRecordJson << (S,Aquamarine) >> {
        + PlayerId int32
        + NickName string
        + Issue int32
        + LuckyNumber int64
        + OpenTime int64
        + Times int32
        + Vip int32

    }
    class OwnLuckyRecordJson << (S,Aquamarine) >> {
        + NickName string
        + Issue int32
        + LuckyNumber int64
        + OpenTime int64
        + AwardType int32
        + Reward []RewardProp

    }
    class RewardProp << (S,Aquamarine) >> {
        + PropId int32
        + Num int32

    }
    class model.LoggerType << (T, #FF7700) >>  {
    }
}


namespace notify {
    interface Notify  {
        + AsyncPush(sessionID string, ops api.GameCommand, msg proto.Message) 
        + SyncPush(sessionID string, ops api.GameCommand, msg proto.Message) 
        + Close(sessionID string) 

    }
    class notify << (S,Aquamarine) >> {
        - pushChan <font color=blue>chan</font> *comet.PushData
        - closeChan <font color=blue>chan</font> string
        - s *comet.Server

        + Close(sessionID string) 
        + AsyncPush(sessionID string, ops api.GameCommand, msg proto.Message) 
        + SyncPush(sessionID string, ops api.GameCommand, msg proto.Message) 

    }
}

"notify.Notify" <|-- "notify.notify"

namespace player {
    class AtomicBomb << (S,Aquamarine) >> {
        - player IPlayer
        - propId int32
        - stage int32
        - freeTimes int32
        - lockRatio int32
        - shootBulletId []int32
        - totalEarn int64
        - x float32
        - y float32
        - angle float32
        - multiples <font color=blue>map</font>[int32]int32
        - roundHits <font color=blue>map</font>[int32]int32
        - backgroundDelta int64
        - freeTimeEarn int64
        - backgroundTick int64

        + InitFreeTime() 
        + IsFreeTimeEnd() bool
        + SetBulletId(id int32) 
        + GetPropId() int32
        + GetStage() int32
        + SetStage(stage int32) 
        + GetLockRatio() int32
        + SetBackGroundTick(tick int64) 
        + GetBackGroundDelta() int64
        + SetBackGroundDelta(delta int64) 
        + Polling(curTick int64) bool
        + UpdateCoords(propId int32, x float32, y float32, angle float32) 
        + AddFreeTimeEarn(earn int64) 
        + DropProp(propId int32, delta int32, ratio int32) bool
        + VerifyCost() bool
        + VerifyFreeTime(bulletType int32, roundId int32, fishValue int32) int32
        + DeltaFreeTime(roundId int32, times int32) int32
        + ExitFreeTime() int64
        + GetWorth() int64
        + UpdateProp(msg *api.UserProp) 

    }
    class AwardControl << (S,Aquamarine) >> {
        - player IPlayer
        - partData <font color=blue>map</font>[string]int64
        - award int64
        - hitRatio int32
        - poolLastScore int64
        - chargeMoney int64

        + UpdateToClient() 
        + GetWorth() int64
        + Serialize() string
        + UnSerialize(data string) 
        + Init() 
        + OnEnter() 
        + OnLeave() 
        + SetValue(key string, value int64) 
        + GetValue(key string) int64
        + CacheDelta(key string, delta int64) 
        + AddChargeMoney(score int64) 
        + GetChargeMoney() int64
        + GetPoolLastScore() int64
        + GetAwardPoolC() int64
        + AwardPoolLossDelta(delta int64) 
        + CanGetAward(award int64) bool
        + SetAwardCache(award int64, ratio int32) 
        + GetAwardCache() (int64, int32)
        + RecordAward(award int64) 

    }
    class AwardMulti << (S,Aquamarine) >> {
        - awardNo string
        - multiple int32

    }
    class BasePlayer << (S,Aquamarine) >> {
        - id int64
        - mid string
        - chairId int32
        - tax int64
        - ip string
        - enterTime int64
        - status int32
        - lastSaveExtraInfo string
        - thoughFlag bool
        - doubleFlag bool
        - traceBuffer bytes.Buffer
        - hitCount int64
        - bulletHitMs int64
        - chengTuoRatio int32
        - moneySaveTick int64
        - extraSaveTick int64

        + HallData proto.PlayerData

        - syncMoneyToClient(syncType int32, delta int32) 

        + GetTotalScore() int64
        + Polling() 
        + GetShareGoodsMgr() *ShareDataMgr
        + GetChengTuoRatio() int32
        + SetChengTuoRatio(ratio int32) 
        + SetThoughFlag(flag bool) 
        + GetThoughFlag() bool
        + SetDoubleFlag(flag bool) 
        + GetDoubleFlag() bool
        + GetFreeTime() *FreeTime
        + GetAtomicBomb() *AtomicBomb
        + GetFortune() *Fortune
        + GetPoseidon() *Poseidon
        + GetDragonWheel() *DragonWheel
        + AddHitCount(count int64) 
        + GetHitCount() int64
        + SetBulletMs(ms int64) 
        + GetBulletMs() int64
        + SetPlayerID(playerID int64) 
        + GetPlayerID() int64
        + SetPlayerStatus(status int32) 
        + GetPlayerStatus() int32
        + GetMID() string
        + SetChairId(chairId int32) 
        + GetChairId() int32
        + AddTax(tax int64) 
        + GetTax() int64
        + GetIP() string
        + GetEnterTime() int64
        + SetLastExtraInfo(str string) 
        + GetBulletMgr() *BulletMgr
        + GetGoodsMgr() *GoodsMgr
        + GetVipLevel() int32
        + GetAwardPoolCurLoss() int64
        + EnterHandle(tableType int32) 
        + LeaveSave() 
        + UpdateShareData() 
        + GetExtraInfo() (string, error)
        + GetGunRatio() int32
        + GetGunLevel() int32
        + GetTicket() int32
        + GetGeneralRp() int64
        + GetStationInfo() *api.StationBase
        + SendNotice() 
        + UpdateUserLostScore() 
        + EveryGameLog(isNotifyClient bool, isRaiseEvent bool, source proto.TransferSource) 
        + FireMoneySnapshoot(remark string) 
        + OnTimerSaveMoney(tableId int32) 
        + SaveExtraInfo() 
        + FireExtraSnapshoot(remark string) 
        + OnTimerSaveExtra() 
        + OnLeaveSaveExtra() 
        + FireUserLogin() 
        + TraceRecord(data string) 
        + FireServerTraceLog() 
        + IsNewComer(date string) bool
        + PropChangeNotify(propId int32, delta int64) 
        + PlayerVipChange() 
        + ModMatchScore(score int64, ratio int32) 
        + ModMatchPay(score int64) 
        + ModMatchPackId(id string) 
        + ReportFragmentReward(prop <font color=blue>map</font>[int32]int64) error
        + NextDayClearReward() 
        + GetNickName() string
        + GetSex() int32
        + GetLevel() int64
        + GetCreateTime() int64
        + GetLoginType() config.LoginType

    }
    class Bullet << (S,Aquamarine) >> {
        + Id int32
        + Ratio int32
        + Type int32
        + Double bool
        + Through bool
        + BuildTick int64
        + IsFree bool
        + Round int32
        + AtomicMulti int32
        + FortuneMulti int32
        + PoseidonMulti int32

    }
    class BulletMgr << (S,Aquamarine) >> {
        - bullets <font color=blue>map</font>[int32]*Bullet

        + Polling(curTick int64) 
        + Init() 
        + AddBullet(bt *Bullet) error
        + RemoveBullet(bulletId int32) error
        + FindBullet(bulletId int32) *Bullet
        + CountUnHitBulletScore() int64
        + CountUnHitBullet(bulletType int32) int64

    }
    class ChargeGiven << (S,Aquamarine) >> {
        - player IPlayer
        - partData <font color=blue>map</font>[string]int64
        - enterTimeSec int64
        - randAwardSec int64

        + OnEnter() 
        + OnLeave() 
        + UpdateToClient() 
        + GetWorth() int64
        + Serialize() string
        + UnSerialize(data string) 
        + Init() 
        + ConfirmNewComerFish(fishID int32) bool
        + SetNewComerFishFlag(fishID int32, delta int64) 
        + SetValue(key string, value int64) 
        + GetValue(key string) int64
        + AddOnlineAwardTimes() 
        + CacheDelta(key string, delta int64) 
        + CheckOnlineAwardTimes() bool

    }
    class DragonWheel << (S,Aquamarine) >> {
        - player IPlayer
        - status int32
        - resultNum int32
        - awardRatio int32
        - award int64
        - gainTick int64
        - fishValue int32
        - bullet *Bullet

        + Init() 
        + GetWorth() int64
        + Polling(curTick int64) 
        + DropProp(bt *Bullet, gain bool, fishValue int32) (int64, int32)
        + Finish() 
        + AddStatistics() 
        + GetResultNum() int32
        + SetStatus(status int32) 
        + GetStatus() int32
        + GetAwardRatio() int32
        + GetAward() int64
        + GetFishValue() int32
        + GetBulletType() int32
        + GetParam() int32
        + UpdateProp(msg *api.UserProp) 

    }
    class Fortune << (S,Aquamarine) >> {
        - player IPlayer
        - partData <font color=blue>map</font>[string]string
        - propId int32
        - stage int32
        - ingotId int32
        - freeTimes int32
        - lockRatio int32
        - atomicMulti int32
        - shootBulletId []int32
        - totalEarn int64
        - backgroundDelta int64
        - freeTimeEarn int64
        - backgroundTick int64
        - ingot <font color=blue>map</font>[int32]*FortuneFreeTime
        - roundHits <font color=blue>map</font>[int32]int32
        - roundId int32

        + OnEnter() 
        + OnLeave() 
        + UpdateToClient() 
        + Serialize() string
        + UnSerialize(data string) 
        + Init() 
        + IsFreeTimeEnd() bool
        + IsFreeTimeUsing() bool
        + SetBulletId(id int32) 
        + GetPropId() int32
        + GetStage() int32
        + SetStage(stage int32) 
        + GetLockRatio() int32
        + SetBackGroundTick(tick int64) 
        + GetBackGroundDelta() int64
        + SetBackGroundDelta(delta int64) 
        + GetAtomicMulti() int32
        + Polling(curTick int64) bool
        + AddFreeTimeEarn(earn int64) 
        + CheckFortuneCanUse() bool
        + DropProp(propId int32, delta int32, ratio int32, multi int32, isBomb bool) (int32, bool)
        + VerifyCost() bool
        + VerifyFreeTime(bulletType int32, fishValue int32, bulletId int32) int32
        + DeltaFreeTime(times int32, bulletId int32) int32
        + ChangeIngot() 
        + ChangeRoundId(bulletId int32) 
        + ExitFreeTime() (int64, int64)
        + GetWorth() int64
        + UpdateProp(msg *api.UserProp) 
        + CheckCanDrop() bool
        + CheckCanShoot() bool

    }
    class FortuneFreeTime << (S,Aquamarine) >> {
        + AtomicMulti int32
        + LockRatio int32
        + FreeTimes int32

        + IngotInit() 

    }
    class FragmentTask << (S,Aquamarine) >> {
        - player IPlayer

        + PartData <font color=blue>map</font>[string]int64
        + RoundTaskId <font color=blue>map</font>[int64]int64

        - clearRewardCount() 

        + Init() 
        + Serialize() string
        + UnSerialize(data string) 
        + UpdateToClient() 
        + GetWorth() int64
        + OnEnter() 
        + OnLeave() 
        + GetFragmentTaskId() int64
        + GetFragmentTaskData() (int32, int64, int32, <font color=blue>map</font>[int32]int64)
        + UpdateFishCount(count int64, ratio int32) bool
        + DeleteCircle() error
        + SetNextTask() error
        + NextDayClearReward() 
        + NoticeFragmentTask() 
        + IsRewardLimit() bool
        + UpdateRewardLimit(reward <font color=blue>map</font>[int32]int64) bool

    }
    class FragmentTaskChange << (S,Aquamarine) >> {
        + Id int64
        + Change int32

        + GetWeight() int

    }
    class FreeTime << (S,Aquamarine) >> {
        - player IPlayer
        - freeTimes int32
        - lockRatio int32
        - freeLevel int32

        + Init() 
        + IsFreeTimeEnd() bool
        + CheckFreeTime() bool
        + VerifyFreeTimes(cost int32) bool
        + GetLevel() int32
        + GetFreeTime() int32
        + DecFreeTimes(freeTimes int32) 
        + UpgradeLevel() 
        + GetWorth() int64
        + GetLockRatio() int32
        + IncFreeTimes(times int32, ratio int32) 
        + VerifyCost(bt *Bullet, times int32) (int32, bool)
        + ReturnFreeTime() int64
        + CheckFreeTimeLevel() 

    }
    class GameData << (S,Aquamarine) >> {
        - player IPlayer

        + HallProps <font color=blue>map</font>[int32]*MoneyPool
        + Profit int64
        + Loss int64

        - moneyHandle(propId int32, amount int64) 
        - maxSingleWin(amount int64) 

        + Init() 
        + GetMoney() int64
        + ModMoney(delta int64) 
        + GetPropAmount(propId int32) int64
        + VerifyProp(propId int32, amount int64) bool
        + SetInitAndClearHallPropsDelta() 
        + ClearHallPropsLogDelta() 
        + ClearHallProp(key int32) 
        + SetHallInitProps(propId int32, amount int64) 
        + AddHallInitProps(propId int32, amount int64) 
        + RemoveHallProps(key int32) 
        + GetHallProps(key int32) *MoneyPool
        + ModHallProp(propId int32, amount int64) error
        + SetSingleMaxWinMoney(value int64) 
        + GetAgentLevel() int32

    }
    class GoodsMgr << (S,Aquamarine) >> {
        - mapPart <font color=blue>map</font>[int32]IPart
        - mapData <font color=blue>map</font>[string]string

        + OnTimer() 
        + UpdateToClient() 
        + GetWorth() int64
        + GetPart(id int32) IPart
        + OnEnter() 
        + OnLeave() 
        + Serialize() (string, error)
        + UnSerialize(mapData <font color=blue>map</font>[string]string) 

    }
    class GunInfo << (S,Aquamarine) >> {
        - player IPlayer
        - partData <font color=blue>map</font>[string]int32
        - gunRatio int32
        - gunLevel int32

        + OnEnter() 
        + OnLeave() 
        + UpdateToClient() 
        + GetWorth() int64
        + SetValue(key string, value int32) 
        + GetValue(key string) int32
        + Serialize() string
        + UnSerialize(data string) 
        + GetExtraRatio() int32
        + VerifyPart(key string, cost int32) bool
        + CacheDelta(key string, cost int32) 
        + Init() 
        + GetKeyByArena(arenaid int32) string
        + UpdateVipFlag(level int32) bool
        + AutoSetProbability() 
        + SetProbability(upordown int32, oldlevel int32) bool
        + SetProbabilityLevel(oldLevel int32) int32
        + SetProbabilityUporDown(upordown int32, cellScore int32) int32
        + GetGunRatio() int32
        + GetGunLevel() int32
        + SetRatioAndLevel(ratio int32, level int32) 

    }
    class GunTask << (S,Aquamarine) >> {
        - player IPlayer

        + PartData <font color=blue>map</font>[string]int64

        + Init() 
        + OnEnter() 
        + OnLeave() 
        + GetWorth() int64
        + SetValue(key string, value int64) 
        + GetValue(key string) int64
        + Serialize() string
        + UnSerialize(data string) 
        + VerifyPart(key string, cost int64) bool
        + CacheDelta(key string, cost int64) 
        + UpdateToClient() 
        + SendTaskInfo(taskInfo *config.TaskInfo) 
        + SendTaskOverInfo() 
        + AllUnlockNotify() 
        + IsGunUnlock() bool
        + GetTaskTargetNum() int32
        + UpdateTaskProgress(count int32) 
        + IsGunEnable(gunLevel int32) bool
        + OnCompleteTask() int32

    }
    interface IPart  {
        + GetWorth() int64
        + Serialize() string
        + UnSerialize(data string) 
        + UpdateToClient() 
        + Init() 
        + OnEnter() 
        + OnLeave() 

    }
    interface IPlayer  {
        + SetPlayerID(playerID int64) 
        + GetPlayerID() int64
        + GetMID() string
        + SetChairId(chairId int32) 
        + GetChairId() int32
        + SetThoughFlag( bool) 
        + GetThoughFlag() bool
        + SetDoubleFlag( bool) 
        + GetDoubleFlag() bool
        + GetMoney() int64
        + ModMoney( int64) 
        + EveryGameLog(isNotifyClient bool, isRaiseEvent bool, propsType proto.TransferSource) 
        + ModHallProp(propId int32, amount int64) error
        + GetHallProps(propId int32) *MoneyPool
        + GetPropAmount(propId int32) int64
        + VerifyProp(propId int32, amount int64) bool
        + SetHallInitProps(propId int32, amount int64) 
        + AddHallInitProps(propId int32, amount int64) 
        + AddTax(tax int64) 
        + GetTax() int64
        + AddHitCount( int64) 
        + GetHitCount() int64
        + SetBulletMs( int64) 
        + GetBulletMs() int64
        + GetIP() string
        + GetEnterTime() int64
        + GetNickName() string
        + GetStationInfo() *api.StationBase
        + GetLoginType() config.LoginType
        + SetPlayerStatus(status int32) 
        + GetPlayerStatus() int32
        + SetLastExtraInfo(str string) 
        + GetGunRatio() int32
        + GetGunLevel() int32
        + OnTimerSaveMoney(tableId int32) 
        + OnTimerSaveExtra() 
        + OnLeaveSaveExtra() 
        + GetVipLevel() int32
        + GetTicket() int32
        + GetGeneralRp() int64
        + GetExtraInfo() (string, error)
        + GetBulletMgr() *BulletMgr
        + GetGoodsMgr() *GoodsMgr
        + GetShareGoodsMgr() *ShareDataMgr
        + GetFreeTime() *FreeTime
        + GetAtomicBomb() *AtomicBomb
        + GetFortune() *Fortune
        + GetDragonWheel() *DragonWheel
        + GetPoseidon() *Poseidon
        + GetTotalScore() int64
        + EnterHandle(tableType int32) 
        + LeaveSave() 
        + SendNotice() 
        + GetAwardPoolCurLoss() int64
        + TraceRecord( string) 
        + GetChengTuoRatio() int32
        + SetChengTuoRatio( int32) 
        + IsNewComer(date string) bool
        + PropChangeNotify(propId int32, delta int64) 
        + PlayerVipChange() 
        + GetSex() int32
        + GetCreateTime() int64
        + ModMatchScore(score int64, ratio int32) 
        + ModMatchPay(score int64) 
        + ModMatchPackId(id string) 
        + Polling() 
        + ReportFragmentReward(prop <font color=blue>map</font>[int32]int64) error
        + NextDayClearReward() 

    }
    class LuckyTask << (S,Aquamarine) >> {
        - player IPlayer
        - score int32
        - taskDetail <font color=blue>map</font>[int32]*TaskInfo
        - tick int64

        + GetWorth() int64
        + Serialize() string
        + UnSerialize(data string) 
        + UpdateToClient() 
        + Polling(curTick int64) 
        + Init() 
        + OnEnter() 
        + OnLeave() 
        + Reset() 
        + GetScore() int32
        + AddScore(score int32) bool
        + CheckScore(score int32) bool
        + AddTaskAmount(taskId int32, amount int32, condition int32) bool
        + LuckyTaskAddAmount(taskType int32, amount int32) 
        + LuckyTaskAccomplish(taskId int32) 
        + GetRedDot() bool
        + IsActivityTime() bool
        + SendTaskMsg(msgSend *api.SCLuckyDrawInfo) 

    }
    class LuckyTaskJson << (S,Aquamarine) >> {
        + Score int32
        + Task []*TaskInfo
        + Tick int64

    }
    class MatchData << (S,Aquamarine) >> {
        - score int64
        - pay int64

    }
    class MatchInfo << (S,Aquamarine) >> {
        - player IPlayer
        - partData <font color=blue>map</font>[string]int64
        - matchData <font color=blue>map</font>[int32]*MatchData
        - scoreBonus <font color=blue>map</font>[int32]float32
        - rewardBonus <font color=blue>map</font>[int32]float32
        - cardBonus <font color=blue>map</font>[int32]int64
        - lastTick int64

        - getValue(key string) int64
        - modScore(matchId int32, score int64) bool
        - modPay(matchId int32, score int64) bool
        - getPackId() []string
        - sendPackInvalid(packId string) 

        + GetWorth() int64
        + UpdateToClient() 
        + Serialize() string
        + UnSerialize(data string) 
        + Init() 
        + Polling() 
        + OnEnter() 
        + OnLeave() 
        + ClearBonus(matchId int32) 
        + ReportMatch(matchId int32) bool
        + IsExist(key string) bool
        + CheckTimePackId() 
        + ReportBonus() 
        + CheckPackId() 
        + ClearSinglePackId() 
        + ReportToHall(match *matchv1.TargetMatchDetail) 
        + GameMatchNotify(matchID int32) 
        + SetPackId(packId string, matchId int32) 
        + GetPackSec(packId string) int64
        + IsBuyMatchPackId(packId string) bool

    }
    class MoneyPool << (S,Aquamarine) >> {
        + InitMoney int64
        + Money int64
        + DeltaMoney int64
        + ConsumeMoney int64
        + EveryGameDelta int64
        + DBConsume int64

        + Init() 
        + SetInitMoney(money int64) 
        + GetInitMoney() int64
        + GetMoney() int64
        + VerifyMoney(score int64) bool
        + GetDeltaMoney() int64
        + ModMoney(delta int64) error
        + SetDeltaMoney(money int64) 
        + SetEveryGameDelta(money int64) 
        + GetEveryGameDelta() int64
        + AddInitMoney(money int64) 
        + SubConsumeMoney(money int64) 
        + AddConsumeMoney(money int64) 
        + GetDBConsume() int64

    }
    class NewYearCard << (S,Aquamarine) >> {
        - player IPlayer
        - partData <font color=blue>map</font>[string]int32
        - status int32
        - newYearRecord *list.List

        + OnEnter() 
        + OnLeave() 
        + UpdateToClient() 
        + GetWorth() int64
        + Serialize() string
        + UnSerialize(data string) 
        + Init() 
        + SetCardStatus(status int32) 
        + GetCardStatus() int32
        + SetValue(key string, delta int32) bool
        + GetValue(key string) int32
        + VerifyValue(key string, delta int32) bool
        + CacheValue(key string, delta int32) bool
        + ClearOpenNewYearCard() 
        + GetRandomCard() bool
        + GetNewYearCardMultiple() ([]*api.NewYearCardMultiple, int32)
        + GetNewYearCardAward() (int32, <font color=blue>map</font>[string]int32, bool)
        + UseNewYearCard(cardValue int32, cardAward int32, baseAward int32, normal int32, bless int32, multi <font color=blue>map</font>[string]int32) int32
        + QueryAwardRecord() 
        + SendRecord() 
        + InsertRecord(record *newYearRecord) 
        + NewYearCommonLog(comb int32, bless int32) 
        + BuyNewYearCardLog(count int32) 
        + UseNewYearCardLog(count int32, award int32) 

    }
    class Poseidon << (S,Aquamarine) >> {
        - player IPlayer
        - freeTimes int32
        - stage int32
        - lockRatio int32
        - bombMulti int32
        - critMulti int32
        - totalEarn int64
        - fishId int32
        - hitTick int64
        - byBulletType int32
        - isBomb bool

        + Init() 
        + GetStage() int32
        + SetStage(stage int32) 
        + GetLockRatio() int32
        + GetBombMulti() int32
        + GetCritMulti() int32
        + GetTotalEarn() int64
        + GetFishId() int32
        + Polling(curTick int64) bool
        + GetWorth() int64
        + ExitFreeTime(p IPlayer) int64
        + IsFreeTimeEnd() bool
        + Drop(freeTimes int32, ratio int32, bombMulti int32, critMulti int32, fishId int32, bulletType int32, isBomb bool) bool
        + IsFinish() bool
        + Verify(times int32) bool
        + Decrease(times int32) bool
        + AddTotalEarn(earn int64) 
        + UpdateProp(msg *api.UserProp) 
        + GetClientBombMulti() int32

    }
    class ShareDataMgr << (S,Aquamarine) >> {
        - mapPart <font color=blue>map</font>[int32]IPart

        + OnEnter() 
        + OnLeave() 
        + GetPart(id int32) IPart
        + Serialize() (string, error)
        + UnSerialize(mapData <font color=blue>map</font>[string]string) 

    }
    class TaskInfo << (S,Aquamarine) >> {
        + TaskId int32
        + CurAmount int32
        + Status int32

    }
    class TorpedoInfo << (S,Aquamarine) >> {
        - player IPlayer
        - partData <font color=blue>map</font>[string]int32

        - recordGivenTorpedo(propId int32, award int32) 

        + OnEnter() 
        + OnLeave() 
        + UpdateToClient() 
        + GetWorth() int64
        + Serialize() string
        + UnSerialize(data string) 
        + Init() 
        + CacheDelta(key int32, value int32) bool
        + SetValue(key int32, value int32) 
        + ShootAllTorpedo(p IPlayer, msgSend *api.SCShootTorpedo) int32
        + UseGivenTorpedo(propId int32) (int32, int64)
        + ShootTorpedo(p IPlayer, id string, msgSend *api.SCShootTorpedo) int32

    }
    class TorpedoLog << (S,Aquamarine) >> {
        - id int32
        - num int32
        - award int32

    }
    class TridentInfo << (S,Aquamarine) >> {
        - player IPlayer
        - partData <font color=blue>map</font>[string]int32
        - maxCount int32
        - tridentBetList []int32
        - tridentStatus int32
        - tridentBet int32
        - tridentAward int32
        - captureScore int32
        - enterTime int64
        - totalCost int64
        - totalEarn int64
        - bigSmallBet int32
        - bigSmallAward int32
        - winCount int32
        - times int32
        - result []int32
        - continueFail int32
        - continueWin int32
        - lastResult int32
        - betTimes int32

        + OnEnter() 
        + OnLeave() 
        + GetWorth() int64
        + Serialize() string
        + UnSerialize(data string) 
        + GetContinueFail() int32
        + Init() 
        + UpdateToClient() 
        + MaxCountUpdate(vipLevel int32) 
        + SetCaptureScore(score int32) 
        + GetCaptureScore() int32
        + SetStatus(status int32) 
        + GetStatus() int32
        + IsTridentBetExist(bet int32) bool
        + SetBigSmallBet(bet int32) 
        + GetBigSmallBet() int32
        + GetBigSmallAward() int32
        + GetTimes() int32
        + SetBetTimes(times int32) 
        + GetWinCounts() int32
        + GetCurScore() int32
        + VerifyTridentScore() bool
        + GetValue(key string) int32
        + SetValue(key string, value int32) 
        + AddValue(key string, value int32) 
        + AddScore(value int32) 
        + IsPlaying() bool
        + InsertTridentBets(score int32) 
        + VerifyTridentBet(score int32) int32
        + GetTridentBet() int32
        + GetTridentAward() int32
        + SetTridentBet(bet int32) 
        + SetTridentAward(award int32) 
        + AddTotalCost(cost int32) 
        + AddTotalEarn(earn int32) 
        + TridentEndHandle() 
        + AddTimes(bet int32, award int32, betBig bool, result bool) 

    }
    class UserPool << (S,Aquamarine) >> {
        - player IPlayer

        + PartData <font color=blue>map</font>[string]int64
        + Level int32
        + OpenPage bool
        + ButtonOpenTS int64
        + ButtonOpenSec int64

        + Init() 
        + OnEnter() 
        + UpdateToClient() 
        + GetWorth() int64
        + SetValue(key string, value int64) 
        + GetValue(key string) int64
        + Serialize() string
        + UnSerialize(data string) 
        + VerifyPart(key string, cost int64) bool
        + CacheDelta(key string, cost int64) 
        + OnLeave() 
        + GetPoolMoney() int64
        + SetUserButton(status int64) 
        + GetUserButton() bool
        + SetDrawLevel(level int32) 
        + GetDrawLevel() int32
        + SetOpenPage(isOpen bool) 
        + GetOpenPage() bool
        + UpdateNotify(mid string, delta int32) 
        + RewardProp(level int32, propId int32, propNum int32, cost int64) (int32, error)
        + UserPoolShare(earn int64, multi int32) int64

    }
    class gunData << (S,Aquamarine) >> {
        + Gun <font color=blue>interface</font>{}

    }
    class newYearRecord << (S,Aquamarine) >> {
        + Comb int32
        + Bless int32
        + Time string

    }
}
"player.AtomicBomb" *-- "player.BasePlayer"
"player.BulletMgr" *-- "player.BasePlayer"
"player.DragonWheel" *-- "player.BasePlayer"
"player.FreeTime" *-- "player.BasePlayer"
"player.GameData" *-- "player.BasePlayer"
"player.GoodsMgr" *-- "player.BasePlayer"
"player.GunInfo" *-- "player.BasePlayer"
"player.Poseidon" *-- "player.BasePlayer"
"player.ShareDataMgr" *-- "player.BasePlayer"

"player.IPart" <|-- "player.AwardControl"
"player.IPart" <|-- "player.ChargeGiven"
"player.IPart" <|-- "player.Fortune"
"player.IPart" <|-- "player.FragmentTask"
"base.IWheelItem" <|-- "player.FragmentTaskChange"
"player.IPart" <|-- "player.GunInfo"
"player.IPart" <|-- "player.GunTask"
"player.IPart" <|-- "player.LuckyTask"
"player.IPart" <|-- "player.MatchInfo"
"player.IPart" <|-- "player.NewYearCard"
"player.IPart" <|-- "player.TorpedoInfo"
"player.IPart" <|-- "player.TridentInfo"
"player.IPart" <|-- "player.UserPool"

namespace redisevent {
    class RedisHandle << (S,Aquamarine) >> {
        + ReqKickPlayer(playerId int64) notifier.NotifyResp
        + ReqGameConsumeMoney(playerId int64, c proto.ConsumeChm) notifier.NotifyResp
        + ReqGameConsumeProp(playerId int64, c proto.ConsumeProp) notifier.NotifyResp
        + PushShutDown() notifier.NotifyResp
        + PushPropChange(playerId int64, c proto.ModProps) notifier.NotifyResp
        + PushGamePropChange(playerId int64, c proto.PropChanged) notifier.NotifyResp
        + PushUpdateJackpot(c proto.Jackpot) notifier.NotifyResp
        + PushGamePurchase(playerId int64, c proto.NotifyGamePurchasedInfo) notifier.NotifyResp
        + PushChengTuoUsedPercent(playerId int64, c proto.ChengTuoUsedPercentChanged) notifier.NotifyResp

    }
}


namespace service {
    class Service << (S,Aquamarine) >> {
        - ac *paladin.Map
        - dao dao.Dao

        - disconnect(dc <font color=blue>chan</font> string) 

        + Req_LoginGameWithToken(ctx "context.Context, req *api.CSLoginGameWithToken) (*api.SCLoginGameWithToken, error)
        + Req_SetProbability(ctx "context.Context, req *api.CSSetProbability) (*api.CommonResp, error)
        + Req_FishOutsideScreen(ctx "context.Context, req *api.CSFishOutsideScreen) (*api.CommonResp, error)
        + Req_LockFish(ctx "context.Context, req *api.CSLockFish) (*api.CommonResp, error)
        + Req_UserShootMulti(ctx "context.Context, req *api.CSUserShootMulti) (*api.CommonResp, error)
        + Req_HitMultiFish(ctx "context.Context, req *api.CSHitMultiFish) (*api.CommonResp, error)
        + Req_SetSkill(ctx "context.Context, req *api.CSSetSkill) (*api.CommonResp, error)
        + Req_SyncMoney(ctx "context.Context, req *api.CSSyncMoney) (*api.CommonResp, error)
        + Req_UserReady(ctx "context.Context, req *api.CSUserReady) (*api.CommonResp, error)
        + Req_SyncFishReq(ctx "context.Context, req *api.CSSyncFishReq) (*api.CommonResp, error)
        + Req_SyncFishRsp(ctx "context.Context, req *api.CSSyncFishRsp) (*api.CommonResp, error)
        + Req_UserRunBackground(ctx "context.Context, req *api.CSUserRunBackground) (*api.CommonResp, error)
        + Req_TridentBet(ctx "context.Context, req *api.CSTridentBet) (*api.CommonResp, error)
        + Req_TridentInfo(ctx "context.Context, req *api.CSTridentInfo) (*api.SCTridentInfo, error)
        + Req_ShootTorpedo(ctx "context.Context, req *api.CSShootTorpedo) (*api.CommonResp, error)
        + Req_SuperTridentShoot(ctx "context.Context, req *api.CSSuperTridentShoot) (*api.CommonResp, error)
        + Req_SuperTridentAttack(ctx "context.Context, req *api.CSSuperTridentAttack) (*api.CommonResp, error)
        + Req_FreeTimeEnd(ctx "context.Context, req *api.CSFreeTimeEnd) (*api.CommonResp, error)
        + Req_BigSmallChoose(ctx "context.Context, req *api.CSBigSmallChoose) (*api.CommonResp, error)
        + Req_BigSmallBet(ctx "context.Context, req *api.CSBigSmallBet) (*api.CommonResp, error)
        + Req_UserScoreRecord(ctx "context.Context, req *api.UserScoreRecord) (*api.CommonResp, error)
        + Req_ScratchNewYearCard(ctx "context.Context, req *api.CSScratchNewYearCard) (*api.CommonResp, error)
        + Req_BuyNewYearCard(ctx "context.Context, req *api.CSBuyNewYearCard) (*api.CommonResp, error)
        + Req_NewYearCardExchange(ctx "context.Context, req *api.CSNewYearCardExchange) (*api.CommonResp, error)
        + Req_NewYearCardAwardRecord(ctx "context.Context, req *api.CSNewYearCardAwardRecord) (*api.CommonResp, error)
        + Req_ClickStatistic(ctx "context.Context, req *api.CSClickStatistic) (*api.CommonResp, error)
        + Req_TaskInfo(ctx "context.Context, req *api.CSTaskInfo) (*api.CommonResp, error)
        + Req_ComTask(ctx "context.Context, req *api.CSComTask) (*api.CommonResp, error)
        + Req_SaveSkillTime(ctx "context.Context, req *api.CSSaveSkillTime) (*api.CommonResp, error)
        + Req_AwardPoolRecord(ctx "context.Context, req *api.CSAwardPoolRecord) (*api.SCAwardPoolRecord, error)
        + Req_MatchPackAddition(ctx "context.Context, req *api.CSMatchPackAddition) (*api.CommonResp, error)
        + Req_FortuneShoot(ctx "context.Context, req *api.CSFortuneShoot) (*api.CommonResp, error)
        + Req_UserPoolInfo(ctx "context.Context, req *api.CSUserPoolInfo) (*api.SCUserPoolInfo, error)
        + Req_UserPoolStatus(ctx "context.Context, req *api.CSUserPoolStatus) (*api.SCUserPoolStatus, error)
        + Req_UserPoolPreDraw(ctx "context.Context, req *api.CSUserPoolPreDraw) (*api.SCUserPoolPreDraw, error)
        + Req_UserPoolDraw(ctx "context.Context, req *api.CSUserPoolDraw) (*api.SCUserPoolDraw, error)
        + Req_GetLuckyNum(ctx "context.Context, req *api.CSGetLuckyNum) (*api.CommonResp, error)
        + Req_LuckyDrawInfo(ctx "context.Context, req *api.CSLuckyDrawInfo) (*api.CommonResp, error)
        + Req_GetLuckyTaskAward(ctx "context.Context, req *api.CSGetLuckyTaskAward) (*api.CommonResp, error)
        + Req_LuckyRedDot(ctx "context.Context, req *api.CSLuckyRedDot) (*api.CommonResp, error)
        + Req_LuckyRecord(ctx "context.Context, req *api.CSLuckyRecord) (*api.CommonResp, error)
        + Req_DragonWheel(ctx "context.Context, req *api.CSDragonWheelStart) (*api.CommonResp, error)
        + Req_FragmentTaskData(ctx "context.Context, req *api.CSFragmentTaskData) (*api.SCFragmentTaskData, error)
        + Req_FragmentTaskReward(ctx "context.Context, req *api.CSFragmentTaskReward) (*api.SCFragmentTaskReward, error)
        + SetCometChan(cl *comet.ChanList, cs *comet.Server) 
        + CheckOnline(ctx "context.Context) (string, player.IPlayer, table.ITable, error)
        + Close() 

    }
}

"api.BydldServer" <|-- "service.Service"

namespace table {
    class CreateFishInfo << (S,Aquamarine) >> {
        + FishTrace []*FishTraceInfo
        + SmallFishInfo []*SmallFish

    }
    class Fish << (S,Aquamarine) >> {
        + UID int32
        + FishID int32
        + BuildTick int64
        + LiveTime int64
        + Speed float32
        + GroupShapeId int32
        + GroupFishUID int32
        + RouteType int32
        + Stage int32
        + SubStage int32

        + GetUID() int32
        + GetFishID() int32
        + GetBuildTime() int64
        + GetFishInfo() *Fish
        + GetFishStage() int32
        + GetFishSubStage() int32
        + SetFishStage(stage int32) 
        + SetFishSubStage(stage int32) 

    }
    class FishMgr << (S,Aquamarine) >> {
        - table ITable
        - sceneId int32
        - curStage int32
        - fishTideLimitNum int32
        - stageBeginTime int64
        - stageExpireTime int64
        - fishMap <font color=blue>map</font>[int32]IFish
        - curFishUID int32
        - occupiedFish <font color=blue>map</font>[int32]int64
        - createLimit <font color=blue>map</font>[int32]int64

        - genFishUID() int32
        - createFishFunc(stageConf *config.StageInfo, createFishList *config.CreateFishListInfo) bool
        - createGroupFish(centerFishConf *config.CenterFishListInfo, stageConf *config.CreateFishListInfo, yuChao bool) bool
        - createNormalRandFish(stageConf *config.CreateFishListInfo) bool
        - createNormalFish(createFishList *config.CreateFishListInfo, fishList *config.FishListInfo) bool
        - getFishIdByType(fishType int32) int32
        - getFishSizeByFuncType(funcType int32) int32
        - getOccupiedFish(fishId int32) int32
        - removeOccupiedFish(fishId int32) 
        - createExtraFish(stageConf *config.StageInfo) bool
        - createFishMore(fishId int32) bool

        + Init(t ITable) 
        + Start() 
        + Stop() 
        + GetFishInfo(uid int32) IFish
        + NextScene() int32
        + ClearFish() 
        + IsStageExpire(ts int64) bool
        + GetCurStage() int32
        + OnNextStage(curTime int64) 
        + CreateFish() 
        + CreateSmallFish(smallFishList string, centerLiveTime int64, finishRouteTime float32, routeType int32, centerFishUID int32, createMap <font color=blue>map</font>[int32]*CreateFishInfo) 
        + IsFishExist(fishUid int32) bool
        + MakeFishTracesDataToClient(fishUID int32, createMap <font color=blue>map</font>[int32]*CreateFishInfo) 
        + ClearTimeOutFish() 
        + RemoveFish(fishUID int32, force bool) bool
        + IsFishDeath(fishUid int32) int32
        + GetFishStage(fishUid int32) int32
        + GetFishSubStage(fishUid int32) int32
        + SetFishStage(fishUid int32, stage int32) 
        + SetFishSubStage(fishUid int32, stage int32) 
        + SetOccupiedFish(fishId int32, tick int64) 
        + CheckCreateLimit(fishId int32) bool
        + SetCreateLimit(fishId int32) 
        + CreateFishForce() 

    }
    class FishTraceInfo << (S,Aquamarine) >> {
        - wait float32

        + X float32
        + Y float32
        + Z float32

    }
    interface IFish  {
        + GetUID() int32
        + GetFishID() int32
        + GetBuildTime() int64
        + GetFishInfo() *Fish
        + GetFishStage() int32
        + GetFishSubStage() int32
        + SetFishStage( int32) 
        + SetFishSubStage( int32) 

    }
    interface ITable  {
        + GetTID() int32
        + SetTID(tid int32) 
        + GetSceneId() int32
        + GetTableType() int32
        + GetPlayer(pid int64) player.IPlayer
        + GetOnePlayingPlayer() player.IPlayer
        + AddPlayer( player.IPlayer,  int32) error
        + RemovePlayer( player.IPlayer) 
        + AddRobot(p player.IPlayer, conf *datastructure.RobotConf) error
        + RemoveRobot(pid int64) bool
        + IsFull() bool
        + IsEmpty() bool
        + Reset() 
        + SetTableType(tableType int32) 
        + GetPlayerNum() int32
        + Ready(pid int64) error
        + SendAllExcept(except int64, command api.GameCommand, message proto.Message) 
        + SendToAllPlayer(command api.GameCommand, message proto.Message) 
        + SendToPlayer(pid int64, command api.GameCommand, message proto.Message) 
        + StartTimer(isLoop bool, duration int64, callback <font color=blue>func</font>() ) int32
        + StopTimer(timerID int32) 
        + ForEachPlayer(visitor <font color=blue>func</font>(player.IPlayer) ) 
        + GetFishMgr() *FishMgr
        + UpdateScoreToClient(p player.IPlayer, syncType int32, delta int32, invalid int32, freeTimeScore int32, fortune int32) 
        + PetSet(p player.IPlayer, req *api.CSSetSkill) 
        + LockFish(p player.IPlayer, req *api.CSLockFish) 
        + SetSetProbability(p player.IPlayer, req *api.CSSetProbability) 
        + SyncFishTracesListReq(p player.IPlayer, req *api.CSSyncFishReq) 
        + SyncFishTracesListRsp(p player.IPlayer, req *api.CSSyncFishRsp) 
        + PlayerMultiShoot(p player.IPlayer, req *api.CSUserShootMulti) error
        + PlayerMultiHit(p player.IPlayer, req *api.CSHitMultiFish) error
        + SuperTridentShoot(p player.IPlayer, req *api.CSSuperTridentShoot) error
        + SuperTridentAttack(p player.IPlayer, req *api.CSSuperTridentAttack) error
        + OnFishOutsideScreen(fishUID int32) 
        + FreeTimeEnd(p player.IPlayer) 
        + UserRunBackground(p player.IPlayer, background bool) 
        + SyncMoney(p player.IPlayer, msgType int32) 
        + TridentInfo(p player.IPlayer) *api.SCTridentInfo
        + TridentChooseBet(p player.IPlayer, req *api.CSTridentBet) 
        + BigSmallChoose(p player.IPlayer, req *api.CSBigSmallChoose) 
        + BigSmallReq(p player.IPlayer, req *api.CSBigSmallBet) 
        + ShootTorpedo(p player.IPlayer, req *api.CSShootTorpedo) 
        + ScratchNewYearCard(p player.IPlayer) 
        + BuyNewYearCard(p player.IPlayer, req *api.CSBuyNewYearCard) 
        + NewYearCardExchange(p player.IPlayer, req *api.CSNewYearCardExchange) 
        + NewYearCardAwardRecord(p player.IPlayer) 
        + CompleteTask(p player.IPlayer) error
        + TaskInfo(p player.IPlayer) 
        + OnMatchPackAddition(p player.IPlayer) int32
        + OnFortuneShoot(p player.IPlayer) 
        + UserPoolInfo(pid int64, openPage bool) 
        + UserPoolStatus(pid int64, isOpen bool) *api.SCUserPoolStatus
        + UserPoolPreDraw(pid int64, reqLevel int32) (*api.SCUserPoolPreDraw, error)
        + UserPoolDraw(pid int64) int32
        + GetLuckyTaskAward(p player.IPlayer, taskId int32) 
        + GetLuckyNum(p player.IPlayer, times int32) 
        + LuckyDrawInfo(p player.IPlayer) 
        + LuckyRedDot(p player.IPlayer) 
        + LuckyRecord(p player.IPlayer, recordType int32) 
        + DragonWheelStart(p player.IPlayer, stage int32) 
        + OnPushPropChanged(pid int64, req *proto.ModProps) (int32, []byte)
        + OnReqGameConsumeMoney(pid int64, amount int64) (int32, []byte)
        + OnReqGameConsumeProp(pid int64, propId int32, amount int64) (int32, []byte)
        + OnPushGamePropChanged(pid int64, req *proto.PropChanged) (int32, []byte)
        + OnChengTuoUsedPercent(pid int64, percent int32) (int32, []byte)
        + OnPushPurchaseCompleted(pid int64, wareId string, price int32) (int32, []byte)
        + FragmentTaskData(p player.IPlayer) (*api.SCFragmentTaskData, error)
        + FragmentTaskReward(p player.IPlayer) (*api.SCFragmentTaskReward, error)

    }
    class SmallFish << (S,Aquamarine) >> {
        + FishUID int32
        + FishID int32
        + BornTime float32

    }
    class baseTable << (S,Aquamarine) >> {
        - tid int32
        - playerMap sync.Map
        - running bool
        - lock sync.Mutex
        - fishMgr *FishMgr
        - timerMap <font color=blue>map</font>[int32]int32
        - tableType int32

        - robotRun(times int64) 
        - robotAutoHit(times int64) 
        - shootSuperTrident() bool
        - shootAtomicBomb() bool
        - shootFortune() bool
        - shootNormal() bool
        - selectOneFish() (IFish, []int32)
        - polling() 
        - start() 
        - savePlayerData() 
        - stop() 
        - checkFish() 
        - checkProp() 
        - syncProp(playerId int64) 
        - buildSyncPropInfo(playerId int64) *api.UsersProp
        - checkNextCreateStage() bool
        - addTimer(timerType int32, duration int64, callback <font color=blue>func</font>() ) 
        - removeTimer(timerType int32) 
        - onSyncFishTimeOut(p player.IPlayer) 
        - checkGoodsPolling() 
        - atomicShoot(p player.IPlayer, bullet *player.Bullet, x float32, y float32, angle float32) error
        - fortuneShoot(p player.IPlayer, bullet *player.Bullet) error
        - normalShoot(p player.IPlayer, bullet *player.Bullet) error
        - freeTimeShoot(p player.IPlayer, bullet *player.Bullet) error
        - checkShootBullet(p player.IPlayer, bullet *player.Bullet) error
        - normalHit(p player.IPlayer, fishUID int32, bt *player.Bullet, effectedFish []int32, msgSend *api.SCHitMultiFish) (error, int32)
        - atomicHit(p player.IPlayer, fishUID int32, bt *player.Bullet, effectedFish []int32, msgSend *api.SCHitMultiFish) error
        - fortuneHit(p player.IPlayer, fishUID int32, bt *player.Bullet, effectedFish []int32, msgSend *api.SCHitMultiFish) error
        - freeTimeHit(p player.IPlayer, fishUID int32, bt *player.Bullet, effectedFish []int32, msgSend *api.SCHitMultiFish) (error, int32)
        - poseidonHit(p player.IPlayer, fishUID int32, fishID int32, fishValue int32, bombMulti int32, critMulti int32, ratio int32, effectedFish []int32, msgSend *api.SCHitMultiFish) error
        - filterEffectFish(fishId int32, screenFish []int32) <font color=blue>map</font>[int32]int32
        - consumeBullet(p player.IPlayer, cost int32) bool
        - fishDispatch(p player.IPlayer, effectedFishes <font color=blue>map</font>[int32]int32, bt *player.Bullet, earn int32, fishUID int32, fishID int32, multi int32, fishValue int32, msg *api.Capturefish, isBomb bool) 
        - fishNormal(p player.IPlayer, bt *player.Bullet, earn int32, fishUID int32, fishID int32, fishValue int32, multi int32, msg *api.Capturefish) 
        - fishDrop(p player.IPlayer, bt *player.Bullet, earn int32, fishUID int32, fishID int32, fishValue int32, multi int32, msg *api.Capturefish, isBomb bool) 
        - dropTorpedo(p player.IPlayer, fishScore int32, msg *api.Capturefish) int32
        - dropLuck(p player.IPlayer, bt *player.Bullet, earn int32, fishValue int32, msg *api.Capturefish) int32
        - dropAtomic(p player.IPlayer, bt *player.Bullet, earn int32, fishUid int32, fishValue int32) int32
        - dropIngot(p player.IPlayer, bt *player.Bullet, earn int32, fishValue int32, multi int32, msg *api.Capturefish, isBomb bool) int32
        - fishAward(p player.IPlayer, bt *player.Bullet, earn int32, fishUID int32, fishID int32, fishValue int32, multi int32, msg *api.Capturefish) 
        - fishUpGrade(p player.IPlayer, bt *player.Bullet, earn int32, fishUID int32, fishID int32, fishValue int32, multi int32, msg *api.Capturefish, isBomb bool) 
        - fishLion(p player.IPlayer, bt *player.Bullet, earn int32, fishUID int32, fishID int32, fishValue int32, multi int32, msg *api.Capturefish) 
        - fishDragonWheel(p player.IPlayer, bt *player.Bullet, earn int32, fishUID int32, fishID int32, fishValue int32, multi int32, msg *api.Capturefish) 
        - fishShock(p player.IPlayer, bt *player.Bullet, effectedFishes <font color=blue>map</font>[int32]int32, earn int32, fishUID int32, fishID int32, fishValue int32, multi int32, msg *api.Capturefish) 
        - hitFishEnd(p player.IPlayer, effectedFishes <font color=blue>map</font>[int32]int32, bt *player.Bullet, earn int32, fishUID int32, fishID int32, multi int32, msg *api.Capturefish) 
        - allTax(p player.IPlayer, bulletCost int32) bool
        - capFishTax(p player.IPlayer) bool
        - awardPoolTax(cost int64) bool
        - freeTimeProbability(p player.IPlayer, times int32, fishValue int32, fishID int32, bt *player.Bullet) (bool, int32)
        - captureProbability(p player.IPlayer, bt *player.Bullet, times int32, multi int32, totalValue int32, fishID int32) int32
        - canGivenChengTuo(p player.IPlayer, consume int64) bool
        - userPoolBalance(p player.IPlayer, fishType int32, earn int32, multi int32, bt *player.Bullet) int32
        - hitEnd(p player.IPlayer, invalidFreeTime int32) 
        - updateFreeTimeToClient(p player.IPlayer, msgType int32, times int32, exchange int32) 
        - removeBullet(p player.IPlayer, bt *player.Bullet) 
        - dragonWheelEnd(p player.IPlayer) 
        - checkAtomicEnd(p player.IPlayer) 
        - checkFortuneEnd(p player.IPlayer) 
        - checkPoseidonEnd(p player.IPlayer) int64
        - poseidonEndNotify(p player.IPlayer) int64
        - poseidonTerminate(p player.IPlayer) int64
        - getFishValue(fishInfo IFish, funcType int32) int32
        - returnInvalidScore(bt *player.Bullet) int32
        - preGetDice(p player.IPlayer, bet int32, betBig bool) (int32, bool, []int32)
        - getDice() (int32, []int32)
        - consumeNormalBullet(p player.IPlayer, fishType int32, times int32, bt *player.Bullet) (bool, int64)
        - bulletEarn(p player.IPlayer, fishType int32, fishValue int32, earn int32, earnMoney int32, bt *player.Bullet) 

        + OnPushPropChanged(pid int64, req *proto.ModProps) (int32, []byte)
        + OnReqGameConsumeMoney(pid int64, amount int64) (int32, []byte)
        + OnReqGameConsumeProp(pid int64, propId int32, amount int64) (int32, []byte)
        + OnPushGamePropChanged(pid int64, req *proto.PropChanged) (int32, []byte)
        + OnChengTuoUsedPercent(pid int64, percent int32) (int32, []byte)
        + OnPushPurchaseCompleted(pid int64, wareId string, price int32) (int32, []byte)
        + AddRobot(p player.IPlayer, conf *datastructure.RobotConf) error
        + RemoveRobot(pid int64) bool
        + GetTID() int32
        + SetTID(tid int32) 
        + GetSceneId() int32
        + GetTableType() int32
        + GetFishMgr() *FishMgr
        + GetPlayer(pid int64) player.IPlayer
        + GetOnePlayingPlayer() player.IPlayer
        + AddPlayer(p player.IPlayer, tableType int32) error
        + GetNextChair() int32
        + RemovePlayer(p player.IPlayer) 
        + GetTablePlayer(pid int64) player.IPlayer
        + IsFull() bool
        + IsEmpty() bool
        + GetPlayerNum() int32
        + Ready(pid int64) error
        + MakeSceneDataToClient() 
        + Reset() 
        + SetTableType(tableType int32) 
        + SendAllExcept(except int64, command api.GameCommand, message proto.Message) 
        + SendToAllPlayer(command api.GameCommand, message proto.Message) 
        + SendToPlayer(pid int64, command api.GameCommand, message proto.Message) 
        + StartTimer(isLoop bool, duration int64, callback <font color=blue>func</font>() ) int32
        + StopTimer(timerID int32) 
        + ForEachPlayer(visitor <font color=blue>func</font>(player.IPlayer) ) 
        + LockFish(p player.IPlayer, req *api.CSLockFish) 
        + PetSet(p player.IPlayer, req *api.CSSetSkill) 
        + SetSetProbability(p player.IPlayer, req *api.CSSetProbability) 
        + SyncFishTracesListReq(p player.IPlayer, req *api.CSSyncFishReq) 
        + SyncFishTracesListRsp(p player.IPlayer, req *api.CSSyncFishRsp) 
        + PlayerMultiShoot(p player.IPlayer, req *api.CSUserShootMulti) error
        + SuperTridentShoot(p player.IPlayer, req *api.CSSuperTridentShoot) error
        + SuperTridentAttack(p player.IPlayer, req *api.CSSuperTridentAttack) error
        + OnFishOutsideScreen(fishUID int32) 
        + PlayerMultiHit(p player.IPlayer, req *api.CSHitMultiFish) error
        + FreeTimeEnd(p player.IPlayer) 
        + UserRunBackground(p player.IPlayer, background bool) 
        + SyncMoney(p player.IPlayer, msgType int32) 
        + TridentInfo(p player.IPlayer) *api.SCTridentInfo
        + TridentChooseBet(p player.IPlayer, req *api.CSTridentBet) 
        + BigSmallChoose(p player.IPlayer, req *api.CSBigSmallChoose) 
        + BigSmallReq(p player.IPlayer, req *api.CSBigSmallBet) 
        + ShootTorpedo(p player.IPlayer, req *api.CSShootTorpedo) 
        + ScratchNewYearCard(p player.IPlayer) 
        + BuyNewYearCard(p player.IPlayer, req *api.CSBuyNewYearCard) 
        + NewYearCardExchange(p player.IPlayer, req *api.CSNewYearCardExchange) 
        + NewYearCardAwardRecord(p player.IPlayer) 
        + CompleteTask(p player.IPlayer) error
        + TaskInfo(p player.IPlayer) 
        + OnMatchPackAddition(p player.IPlayer) int32
        + OnFortuneShoot(p player.IPlayer) 
        + UserPoolInfo(pid int64, openPage bool) 
        + UserPoolStatus(pid int64, isOpen bool) *api.SCUserPoolStatus
        + UserPoolPreDraw(pid int64, reqLevel int32) (*api.SCUserPoolPreDraw, error)
        + UserPoolDraw(pid int64) int32
        + GetLuckyTaskAward(p player.IPlayer, taskId int32) 
        + GetLuckyNum(p player.IPlayer, times int32) 
        + LuckyDrawInfo(p player.IPlayer) 
        + LuckyRedDot(p player.IPlayer) 
        + LuckyRecord(p player.IPlayer, recordType int32) 
        + DragonWheelStart(p player.IPlayer, stage int32) 
        + FragmentTaskData(p player.IPlayer) (*api.SCFragmentTaskData, error)
        + FragmentTaskReward(p player.IPlayer) (*api.SCFragmentTaskReward, error)
        + UpdateFragmentTask(p player.IPlayer, count int64, ratio int32) 
        + UpdateScoreToClient(p player.IPlayer, syncType int32, delta int32, invalid int32, freeTimeScore int32, fortune int32) 
        + ShootAllTorpedo(p player.IPlayer) 

    }
    class robotMgr << (S,Aquamarine) >> {
        - robot player.IPlayer
        - robotConf *datastructure.RobotConf
        - bulletId int32
        - robotCancel <font color=blue>chan</font> int
        - num int32
        - atomicBombBulletId int32

    }
}
"table.robotMgr" *-- "table.baseTable"

"table.IFish" <|-- "table.Fish"
"table.ITable" <|-- "table.baseTable"

namespace tree {
    class Node << (S,Aquamarine) >> {
        + Key int32
        + Data <font color=blue>interface</font>{}
        + Children <font color=blue>map</font>[int32]*Node

        + IsLeaf() bool
        + Clear() 

    }
}


"__builtin__.int32" #.. "api.ErrCode"
"__builtin__.int32" #.. "api.GameCommand"
"__builtin__.int32" #.. "config.LoginType"
"__builtin__.int32" #.. "event.EventType"
"__builtin__.string" #.. "model.LoggerType"
"datastructure.fontcolorbluefuncfontstringapiGameCommandprotoMessage" #.. "datastructure.Pusher"
"event.<font color=blue>func</font>(IEvent) " #.. "event.IEventListener"
@enduml
